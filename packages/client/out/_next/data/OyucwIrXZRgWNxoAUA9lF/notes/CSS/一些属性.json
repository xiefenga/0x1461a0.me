{"pageProps":{"metaTitle":"一些属性","article":{"title":"一些属性","content":"\r\n\r\n## border-image\r\n\r\n- `border-image-source`\r\n\r\n- `border-image-slice` \r\n\r\n\t值类型：数字（代表 `px`）百分数，`fill`\r\n\r\n\t所切的每一小块分别对应 `border` 八个部分的每一部分，默认值 100%，`fill` 会连中间那一部分也填充在 content 部分\r\n\r\n\t![](http://oss.xiefeng.tech/img/20210620171050.png)\r\n\r\n- `border-image-repeat`\r\n\r\n\t当某一块大小和截出来的大小不同时，怎么样来解决，默认 `strecth` 其他值：`repeat `、`round`、 `space`\r\n\t\r\n- `border-image-outset`\r\n\r\n\t截切出来的背景向外偏移多少的距离，不允许负值\r\n\r\n- `border-image-width`\r\n\r\n\t被截图像的宽度，默认值是 1 代表是 1 * `border-width`，如果为 `auto` 则值等于 `border-image-slice` 的值\r\n\r\n## radial-gradient\r\n\r\n第一个值：`circle / ellipse size at position`\r\n\r\n`circle`、`ellipse` 可以显示的填也可不填\r\n\r\n**size：**circle 只可填一个数值，ellipse 需要填两个数值，分别是横向，竖向的长度值；\r\n\r\n​\t\t\t值类型：数值，百分比，特殊值： `closest-corner`、`closest-side`、`farthest-side`、`farthest-corner` （默认值）\r\n\r\n**position：** 圆心的位置，可填 数值，百分比，`left` 等值，默认值 `center` \r\n\r\n第二个值：颜色 + 发散半径（可填长度或百分比，用于指定起止色的位置，可省）\r\n\r\n第三个值：颜色 +  发散半径（可填长度或百分比，用于指定起止色的位置，可省）\r\n\r\n<hr>\r\n\r\n`repeating-linear-gradient()`\r\n\r\n用重复的线性渐变创建图像，语法和 `linear-gradient()` 一样\r\n\r\n`repeating-radial-gradient()`\r\n\r\n用重复的径向渐变创建图像，语法和 `radial-gradient()` 一样\r\n\r\n用 `background-size` + `background-repeat` + `linear-gradient()` 可以实现类似得效果\r\n\r\n## clip-path\r\n\r\n- circle\r\n\r\n```css\r\nclip-path: circle(r at 50% 50%)\r\n```\r\n\r\n- ellipse\r\n\r\n```css\r\nclip-path: ellipse(a b at 50% 50%)\r\n```\r\n\r\n- polygon\r\n\r\n```css\r\nclip-path: polygon(x y, x y, x y[, x y, ....])\r\n```\r\n\r\n- inset\r\n\r\n```css\r\nclip-path: inset(10px 20px 30px 40px);  // 分别 上、右、下、左 向内裁剪多少长度\r\n```\r\n\r\n## 文本\r\n\r\n### 换行\r\n\r\n`word-break` 属性可以控制元素内容文本的字符间的换行行为\r\n\r\n- `normal`：默认值，CJK 字符在文字位置截断，非 CJK 字符在单词位置截断\r\n- `keep-all`：所有文字都在**单词之间**截断\r\n- `break-all`：所有字符都在**文字处**截断\r\n- `break-word`：\r\n  - 所有在**文字处**截断\r\n  - 不同的是如果该行容纳不下该单词会**先换行再截断**\r\n  - 效果和 `word-wrap: break-word` 相同\r\n\r\n### 溢出\r\n\r\n`text-overflow` 控制溢出的文本显示方式：\r\n\r\n- `clip`：直接裁剪，默认值\r\n- `ellipsis`：打点处理，比较美观\r\n\r\n单行文本溢出打点：\r\n\r\n```css\r\n.text-container {\r\n  width: 500px;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n}\r\n```\r\n\r\n多行文本溢出打点：\r\n\r\n```css\r\n.text-container {\r\n  width: 500px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n}\r\n```\r\n\r\n`-webkit-line-clamp` 可以把容器中的内容限制为指定的行数，配合 `overflow` 即可实现多行溢出打点\r\n\r\n但是只有在 `display` 属性设置成 `-webkit-box` 或者 `-webkit-inline-box` 并且 `-webkit-box-orient` 为 `vertical` 时才有效果\r\n\r\n这几个属性不仅 webkit 内核也支持，firefox 也支持该属性\r\n\r\n使用限制：不要使用上下 `padding`，如果需要上下撑开一点使用 `line-height`\r\n\r\n```css\r\n.text-container{\r\n  width: 500px;\r\n  overflow: hidden;\r\n  text-overflow: ellipsis;\r\n  display: -webkit-box;\r\n  -webkit-line-clamp: 2;\r\n  -webkit-box-orient: vertical;\r\n  padding: 0 10px;\r\n  line-height: 30px;\r\n  height: 60px;\r\n}\r\n```\r\n\r\n这样写可以实现优雅降级，对于不支持 `-webkit-line-clamp` 的浏览器也不会溢出，仅仅是少了几个点\r\n\r\n## 背景\r\n\r\n`background-clip`：设置元素的背景显示的区域\r\n\r\n- `border-box`\r\n- `padding-box`\r\n- `content-box`\r\n\r\n实现背景裁剪文字：\r\n\r\n```css\r\n.bg-demo {\r\n  background-clip: text;\r\n  -webkit-background-clip: text;\r\n  color: transparent;\r\n}\r\n```\r\n\r\n`background-origin`：设置背景显示的起点\r\n\r\n- `border-box`\r\n- `padding-box`\r\n- `content-box`\r\n\r\n\r\n\r\n\r\n\r\n","meta":{"size":4379,"birthTime":1663496641377.4888,"updateTime":1663496641377.8728}}},"__N_SSG":true}