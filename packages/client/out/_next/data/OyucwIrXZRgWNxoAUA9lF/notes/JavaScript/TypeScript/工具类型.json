{"pageProps":{"metaTitle":"工具类型","article":{"title":"工具类型","content":"# 索引访问类型\r\n\r\n索引访问类型来查找一种类型的特定属性的类型\r\n\r\n```typescript\r\ntype Person = { age: number; name: string; alive: boolean };\r\n\r\ntype Age = Person[\"age\"];\r\n\r\ntype I1 = Person[\"age\" | \"name\"];\r\n \r\ntype I2 = Person[keyof Person];\r\n\r\ntype AliveOrName = \"alive\" | \"name\";\r\n\r\ntype I3 = Person[AliveOrName];\r\n```\r\n\r\n# 工具类型\r\n\r\n## Partial\r\n\r\n`Partial` 允许你将类型 `T` 的所有属性设为可选。\r\n\r\n```typescript\r\ninterface PartialType {\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n\r\ntype T = Partial<PartialType>;\r\n\r\n/*\r\ntype T = {\r\n  id?: number\r\n  firstName?: string\r\n  lastName?: string\r\n}\r\n*/\r\n```\r\n\r\n## Required\r\n\r\n和 `Partial` 相反，将某个类型里的属性全部变为必选项\r\n\r\n```typescript\r\ninterface RequiredType {\r\n    id: number;\r\n    firstName?: string;\r\n    lastName?: string;\r\n}\r\n\r\ntype T = Required<RequiredType>;\r\n\r\n/*\r\ntype T = {\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n*/\r\n```\r\n\r\n## Readonly\r\n\r\n让某个类型的所有属性只读，无法更改\r\n\r\n```typescript\r\ninterface ReadonlyType {\r\n    id: number;\r\n    name: string;\r\n}\r\n\r\ntype T = Readonly<ReadonlyType>;\r\n\r\n/*\r\ntype T = {\r\n    readonly id: number;\r\n    readonly name: string;\r\n}\r\n*/\r\n```\r\n\r\n## Pick\r\n\r\n用于从一个已存在的类型中选择一些属性创建一个新的类型。\r\n\r\n```typescript\r\ninterface PickType {\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n\r\ntype T = Pick<PickType, 'firstName' | 'lastName'>;\r\n\r\n/*\r\ntype T = {\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n*/\r\n```\r\n\r\n## Omit\r\n\r\n从一个类型中去除一些属性之后创建新的类型。\r\n\r\n```typescript\r\ninterface OmitType {\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n\r\ntype T = Omit<OmitType, 'firstName' | 'lastName'>\r\n\r\n/*\r\ntype T = {\r\n    id: number;\r\n}\r\n*/\r\n```\r\n\r\n## Extract\r\n\r\n取两个类型的交集，创建新的类型。\r\n\r\n```typescript\r\ninterface FirstType {\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n\r\ninterface SecondType {\r\n    id: number;\r\n    address: string;\r\n    city: string;\r\n}\r\n\r\ntype T = Extract<keyof FirstType, keyof SecondType>;\r\n\r\n// type T = \"id\"\r\n```\r\n\r\n## Exclude\r\n\r\n从一个类型中排除另一个类型，创建新的类型。\r\n\r\n```typescript\r\nnterface FirstType {\r\n    id: number;\r\n    firstName: string;\r\n    lastName: string;\r\n}\r\n\r\ninterface SecondType {\r\n    id: number;\r\n    address: string;\r\n    city: string;\r\n}\r\n\r\ntype T = Exclude<keyof FirstType, keyof SecondType>;\r\n\r\n// type T = \"firstName\" | \"lastName\"\r\n```\r\n\r\n## Record\r\n\r\n通过将一个类型的属性映射到另一个类型的属性创建一个新的类型。\r\n\r\n```typescript\r\ninterface EmployeeType {\r\n    id: number;\r\n    fullname: string;\r\n    role: string;\r\n}\r\n\r\ntype T = Record<number, EmployeeType>;\r\n/*\r\ntype T = {\r\n    [x: number]: EmployeeType;\r\n}\r\n*/\r\n```\r\n\r\n## NonNullable\r\n\r\n从一个类型中取出 `null` 和 `undefined`\r\n\r\n```typescript\r\ntype NonNullableType = string | number | null | undefined;\r\n\r\ntype T = NonNullable<NonNullableType>;\r\n\r\n// type T = string | number\r\n```\r\n\r\n## ReturnType\r\n\r\n它接受一个函数类型并产生它的返回类型\r\n\r\n```typescript\r\ntype Predicate = (x: unknown) => boolean;\r\ntype K = ReturnType<Predicate>;\r\n```\r\n\r\n值和类型不是一回事， typeof 可以引用值的类型\r\n","meta":{"size":3393,"birthTime":1663496641396.3286,"updateTime":1663496641396.43}}},"__N_SSG":true}