{"pageProps":{"metaTitle":"Proxy","article":{"title":"Proxy","content":"# Reflect\r\n\r\n> `Reflect` 是一个内置的JS对象，它提供了一系列方法，可以让开发者通过调用这些方法，访问一些JS底层功能\r\n\r\n**提供的API：**\r\n\r\n- `Reflect.set(target, propertyKey, value)` \r\n\r\n  设置对象 `target` 的属性 `propertyKey` 的值为 `value`，等同于给对象的属性赋值\r\n\r\n- `Reflect.get(target, propertyKey)` \r\n\r\n  读取对象 `target` 的属性 `propertyKey`，等同于读取对象的属性值\r\n\r\n- `Reflect.apply(target, thisArgument, argumentsList)`\r\n\r\n  调用一个指定的函数，并绑定 `this` 和参数列表。等同于函数调用\r\n\r\n- `Reflect.deleteProperty(target, propertyKey)`\r\n\r\n  删除一个对象的属性，等同于 `delete` \r\n\r\n- `Reflect.defineProperty(target, propertyKey, attributes)`\r\n\r\n  类似于 `Object.defineProperty`，不同的是如果配置出现问题，返回 `false` 而不是报错\r\n\r\n- `Reflect.construct(target, argumentsList)`\r\n\r\n  用构造函数的方式创建一个对象，等同于 `new`\r\n\r\n- `Reflect.has(target, propertyKey)` \r\n\r\n  判断一个对象是否拥有一个属性，等同于 `in` \r\n\r\n其他API：https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect\r\n\r\n# Proxy\r\n\r\n> `Proxy` 对象用于定义基本操作的自定义行为（如属性查找、赋值、枚举、函数调用等）\r\n\r\n```js\r\nconst p = new Proxy(target, handler)\r\n```\r\n\r\n`handler` 对象是一个容纳一批特定属性的占位符对象。它包含有 `Proxy` 的各个捕获器，捕获器和 `Reflect` 静态方法保持一致\r\n\r\n```js\r\nconst obj = {a: 1, b: 2};\r\nconst p = new Proxy(obj, {\r\n    set(target, property, value) {\r\n        console.log('赋值了')\r\n        Reflect.set(target, property, value);\r\n    },\r\n    deleteProperty(target, property) {\r\n        console.log('我不让你删除');\r\n        return false;\r\n    }\r\n});\r\n```\r\n\r\n","meta":{"size":1876,"birthTime":1663496641382.8743,"updateTime":1663496641383.0625}}},"__N_SSG":true}