{"pageProps":{"metaTitle":"webpack5更新","article":{"title":"webpack5更新","content":"## 清除输出目录\n\n`webpack5`清除输出目录开箱可用，无须安装`clean-webpack-plugin`，具体做法如下：\n\n```js\nmodule.exports = {\n  output: {\n    clean: true\n  }\n}\n```\n\n## top-level-await\n\n`webpack5`现在允许在模块的顶级代码中直接使用`await`\n\n```js\n// src/index.js\nconst resp = await fetch(\"http://www.baidu.com\");\nconst jsonBody = await resp.json();\nexport default jsonBody;\n```\n\n目前，`top-level-await`还未成为正式标准，因此，对于`webpack5`而言，该功能是作为`experiments`发布的，需要在`webpack.config.js`中配置开启\n\n```js\n// webpack.config.js\nmodule.exports = {\n  experiments: {\n    topLevelAwait: true,\n  },\n};\n```\n\n## 打包体积优化\n\n`webpack5`对模块的合并、作用域提升、`tree shaking`等处理更加智能\n\n## 打包缓存开箱即用\n\n在`webpack4`中，需要使用`cache-loader`缓存打包结果以优化之后的打包性能\n\n而在`webpack5`中，默认就已经开启了打包缓存，无须再安装`cache-loader`\n\n默认情况下，`webpack5`是将模块的打包结果缓存到内存中，可以通过`cache`配置进行更改\n\n```js\nconst path = require(\"path\");\n\nmodule.exports = {\n  cache: {\n    // 缓存类型，支持：memory、filesystem\n    type: \"filesystem\", \n    // 缓存目录，仅类型为 filesystem 有效\n    cacheDirectory: path.resolve(__dirname, \"node_modules/.cache/webpack\"), \n  },\n};\n```\n\n> 关于`cache`的更多配置参考：https://webpack.docschina.org/configuration/other-options/#cache\n\n## 资源模块\n\n在`webpack4`中，针对资源型文件我们通常使用`file-loader`、`url-loader`、`raw-loader`进行处理\n\n由于大部分前端项目都会用到资源型文件，因此`webpack5`原生支持了资源型模块\n\n详见：https://webpack.docschina.org/guides/asset-modules/\n\n## 模块联邦\n\n。。。\n\n\n\n\n\n\n\n[升级Webpack5实践](https://segmentfault.com/a/1190000040846550)\n\nhttp://www.chenpe.xyz/frontEnd/webpack/webpack5-gengxinneirong.html#%E4%B8%BB%E8%A6%81%E7%9A%84%E5%86%85%E9%83%A8%E6%9E%B6%E6%9E%84%E5%8F%98%E6%9B%B4\n\n","meta":{"size":2078,"birthTime":1663496641401.9736,"updateTime":1663496641402.3909}}},"__N_SSG":true}