{"pageProps":{"metaTitle":"CSS相关","article":{"title":"CSS相关","content":"## 导入CSS\n\nwebpack 本身只能读取 CSS 文件的内容并将其当作 JavaScript 代码进行分析，因此需要有一个 loader 转换 CSS 代码\n\n### css-loader\n\ncss-loader 的作用，就是将 CSS 代码转换为 JavaScript 代码，具体做的工作：\n\n1. 将 CSS 文件的内容作为字符串导出，以及导出其他一些信息\n2. 将 CSS 中的其他依赖作为 require 导入，以便 webpack 分析依赖\n3. 通过传递 `module` 配置项，启用 CSS module 功能\n\n### style-loader\n\ncss-loader 仅将 CSS 转换为字符串导出，style-loader 可以将 css-loader 转换后的代码进一步加入到页面的 style 元素中\n\n可以简单的描述为给经过 css-loader 的模块添加了如下代码：\n\n```javascript\nvar style = module.exports;\nvar styleElem = document.createElement(\"style\");\nstyleElem.innerHTML = style;\ndocument.head.appendChild(styleElem);\nmodule.exports = {}\n```\n\n## 抽离css文件\n\nstyle-loader 使用的方式是用一段 JavaScript 代码将样式加入到 style 元素中\n\n实际的开发中，我们往往希望依赖的样式最终形成一个 CSS 文件\n\n使用 `mini-css-extract-plugin` 可以解决这个问题，该库提供了1个plugin和1个loader：\n\n- plugin：负责生成css文件\n- loader：负责记录要生成的css文件的内容，同时导出开启css-module后的样式对象\n\n```javascript\nconst MiniCssExtractPlugin = require(\"mini-css-extract-plugin\")\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.css$/,\n        use: [MiniCssExtractPlugin.loader, \"css-loader?modules\"]\n      }\n    ]\n  },\n  plugins: [\n    new MiniCssExtractPlugin() //负责生成css文件\n  ]\n}\n```\n\n","meta":{"size":1676,"birthTime":1663496641401.0986,"updateTime":1663496641401.389}}},"__N_SSG":true}