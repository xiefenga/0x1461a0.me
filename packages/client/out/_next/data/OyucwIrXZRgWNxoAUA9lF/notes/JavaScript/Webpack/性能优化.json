{"pageProps":{"metaTitle":"性能优化","article":{"title":"性能优化","content":"## 构建性能\n\n构建性能指的是在**开发阶段**的构建速度，优化的目标是：降低从打包开始，到代码效果呈现所经过的时间\n\n构建主要就是一个计算密集的任务，所以提升构建性能的主要思路就是减少不必要的计算和提高计算速度\n\n### 减少解析\n\n模块解析包括：抽象语法树分析、依赖分析、模块语法替换\n\n- 如果某个模块不做解析，该模块经过loader处理后的代码就是最终代码\n- 如果没有 loader 对该模块进行处理，该模块的源码就是最终打包结果的代码\n\n通过配置 `module.noParse` 可以让一些已经打包好的第三方库不做没有必要的解析，比如：jQuery\n\n### 限制loader\n\n对于一些模块，可以不使用某些 loader 进行处理，减少不必要的处理\n\n例如：对于打包好的或者本身就是使用 es5 书写的库可以不使用 `babel-loader`\n\n通过 `module.rule.exclude` 或 `module.rule.include` 限制使用 loader 的模块：\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        exclude: /node_modules/,\n        use: \"babel-loader\"\n      }\n    ]\n  }\n}\n```\n\n### 缓存loader\n\nloader 的运行中包含一个 `pitch` 过程，可以决定是否使用后序的 loader\n\n![](https://xf-blog-imgs.oss-cn-hangzhou.aliyuncs.com/img/20210205121058.png)\n\n某个文件内容不变，经过相同的 loader 解析后，结果基本上是不会发生变化的\n\n可以将 loader 的解析结果保存下来，让后续的解析直接使用保存的结果，`cache-loader` 可以实现这样的功能\n\n```javascript\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.js$/,\n        use: ['cache-loader', ...loaders]\n      },\n    ],\n  },\n};\n```\n\n### loader多线程\n\n通过 `thread-loader` 开启一个线程池，它会把后续的 loader 放到线程池的线程中运行，以提高构建效率\n\n由于后续的 loader 会放到新的线程中，所以后续的 loader 有一些限制：\n\n- 使用 webpack api 生成文件\n- 无法使用自定义的 plugin api\n- 无法访问 webpack options\n\n开启和管理线程需要消耗时间，在小型项目中使用 `thread-loader` 反而会增加构建时间\n\n## 传输性能\n\n传输性能指的是打包后的代码传输到浏览器所经过的时间，优化传输性能时需要考虑：\n\n- 总传输量\n- 文件数量\n- 浏览器缓存\n\n### 手动分包\n\n手动分包的思路：\n\n1. 单独打包公共模块，将其打包成动态链接库，并生成资源清单\n2. 在页面手动引入公共模块\n3. 入口模块正常打包，打包时如果发现模块中使用了资源清单中描述的模块则不会引入模块代码\n\n#### 打包公共模块\n\n1. 单独打包公共模块，并暴露变量名\n\n   ```javascript\n   // webpack.dll.config.js\n   module.exports = {\n     mode: \"production\",\n     entry: {\n       jquery: [\"jquery\"],\n       lodash: [\"lodash\"]\n     },\n     output: {\n       filename: \"dll/[name].js\",\n       library: \"[name]\"\n     }\n   }\n   ```\n\n2. 生成资源清单\n\n   ```javascript\n   // webpack.dll.config.js\n   module.exports = {\n     plugins: [\n       new webpack.DllPlugin({\n         path: path.resolve(__dirname, \"dll\", \"[name].manifest.json\"), //资源清单的保存位置\n         name: \"[name]\"//资源清单中，暴露的变量名\n       })\n     ]\n   }\n   ```\n\n#### 使用公共模块\n\n1. 在页面中手动引入公共模块\n\n   ```html\n   <script src=\"./dll/jquery.js\"></script>\n   <script src=\"./dll/lodash.js\"></script>\n   ```\n\n2. 使用 `DllReferencePlugin` 控制普通模块的打包结果\n\n   ```javascript\n   module.exports = {\n     plugins:[\n       new webpack.DllReferencePlugin({\n         manifest: require(\"./dll/jquery.manifest.json\")\n       }),\n       new webpack.DllReferencePlugin({\n         manifest: require(\"./dll/lodash.manifest.json\")\n       })\n     ]\n   }\n   ```\n\n#### 打包结果\n\n在资源清单中出现的模块，源码不会出现在打包结果当中\n\n```javascript\n(function(modules){\n  //...\n})({\n  \"./src/index.js\":\n  function(module, exports, __webpack_require__){\n    var $ = __webpack_require__(\"./node_modules/jquery/index.js\")\n    var _ = __webpack_require__(\"./node_modules/lodash/index.js\")\n    _.isArray($(\".red\"));\n  },\n  \"./node_modules/jquery/index.js\":\n  function(module, exports, __webpack_require__){\n    module.exports = jquery;\n  },\n  \"./node_modules/lodash/index.js\":\n  function(module, exports, __webpack_require__){\n    module.exports = lodash;\n  }\n})\n```\n\n### 自动分包\n\n自动分包是从**实际的角度**出发，从一个更加**宏观的角度**来控制分包，而一般不对具体哪个包要分出去进行控制\n\n自动分包不仅方便，而且更加贴合实际的开发需要，使用自动分包关键是要配置一个合理的**分包策略**\n\nwebpack 会按照分包策略自动的进行分包，不需要额外的插件\n\n#### 分包过程\n\n![](https://xf-blog-imgs.oss-cn-hangzhou.aliyuncs.com/img/20210205134035.png)\n\n- 分包策略决定了 webpack 如何分包\n- 分包时 webpack 会开启一个**新的chunk**，对分离的模块进行打包\n- 打包结果中，公共的部分被提取出来形成了一个单独的文件，它是新 chunk 的产物\n\n#### 分包策略\n\n分包策略有其默认的配置，我们只需要轻微的改动，即可应对大部分分包场景\n\nwebpack提供了 `optimization.splitChunks` 配置项，用于配置一些优化信息：\n\n- chunks：需要应用分包策略的 chunk\n  - all: 对于所有的chunk都要应用分包策略\n  - async：仅针对异步chunk应用分包策略，默认值\n  - initial：仅针对普通chunk应用分包策略\n- maxSize：控制包的最大字节数，如果某个包超过了该值，则 webpack 会尽可能的将其分离成多个包\n  - 分包的**基础单位是模块**，如果一个完整的模块超过了该体积，它是无法做到再切割的\n  - 该配置看上去很美妙，实际意义其实不大，因为分包的目的是**提取大量的公共代码**，从而减少总体积和充分利用浏览器缓存\n\n#### 原理\n\n自动分包的原理其实并不复杂，主要经过以下步骤：\n\n1. 检查每个chunk编译的结果\n2. 根据分包策略，找到那些满足策略的模块\n3. 根据分包策略，生成新的chunk打包这些模块（代码有所变化）\n4. 把打包出去的模块从原始包中移除，并修正原始包代码\n\n在代码层面，有以下变动\n\n1. 分包的代码中，加入一个全局变量，类型为数组，其中包含公共模块的代码\n2. 原始包的代码中，使用数组中的公共代码\n","meta":{"size":6641,"birthTime":1663496641403.19,"updateTime":1663496641403.3142}}},"__N_SSG":true}