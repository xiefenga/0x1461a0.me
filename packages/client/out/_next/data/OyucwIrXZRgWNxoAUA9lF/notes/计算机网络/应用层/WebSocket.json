{"pageProps":{"metaTitle":"WebSocket","article":{"title":"WebSocket","content":"# 协议升级\r\n\r\n## URI 格式\r\n\r\n- ws://host:port/path/query\r\n- wss://host:port/path/query\r\n\r\n## 提供的信息\r\n\r\n- 握手随机数：Sec-WebSocket-Key\r\n- 选择子协议：Sec-WebSocket-Protocol，可选\r\n- 扩展协议：Sec-WebSocket-Extensions，可选\r\n- CORS跨域：Orign，可选\r\n\r\n## 建立握手\r\n\r\n协议升级必须是 GET 请求，必须基于 HTTP/1.1，必须传输随机握手数 `Sec-WebSocket-Key`\r\n\r\n```http\r\nGET /?encoding=text HTTP/1.1\r\nHost: websocket.taohui.tech\r\nAccept-Encoding: gzip, deflate\r\nSec-WebSocket-Version: 13\r\nOrigin: http://www.websocket.org\r\nSec-WebSocket-Extensions: permessage-deflate\r\nSec-WebSocket-Key: c3SkgVxVCDhVCp69PJFf3A==\r\nConnection: keep-alive, Upgrade\r\nPragma: no-cache\r\nCache-Control: no-cache\r\nUpgrade: websocket\r\n```\r\n\r\n升级成功返回 101 状态码，`Sec-WebSocket-Accept` 头部是必须的，证明握手被服务器接受。\r\n\r\n```http\r\nHTTP/1.1 101 Web Socket Protocol Handshake\r\nServer: openresty/1.13.6.2\r\nDate: Mon, 10 Dec 2018 08:14:29 GMT\r\nConnection: upgrade\r\nAccess-Control-Allow-Credentials: true\r\nAccess-Control-Allow-Headers: content-type\r\nAccess-Control-Allow-Headers: authorization\r\nAccess-Control-Allow-Headers: x-websocket-extensions\r\nAccess-Control-Allow-Headers: x-websocket-version\r\nAccess-Control-Allow-Headers: x-websocket-protocol\r\nAccess-Control-Allow-Origin: http://www.websocket.org\r\nSec-WebSocket-Accept: yA9O5xGLp8SbwCV//OepMPw7pEI=\r\nUpgrade: websocket\r\n```\r\n\r\n`Sec-WebSocket-Accept` 值构造规则：\r\n\r\n1. 将请求的 `Sec-WebSocket-Key` 拼接上GUID：`258EAFA5-E914-47DA-95CA-C5AB0DC85B11`\r\n2. SHA1(Sec-WebSocket-Key + GUID)\r\n3. BASE64(SHA1(Sec-WebSocket-Key + GUID))\r\n\r\n# 数据帧\r\n\r\nWebSocket客户端、服务端通信的最小单位是帧，1 条消息由 1 个或者多个帧组成，这些数据帧属于同一类型\r\n\r\n每一帧要么承载字符数据，要么承载二进制数据\r\n\r\n## 帧格式\r\n\r\n![](http://oss.xiefeng.tech/img/20210404220400.png)\r\n\r\n`FIN`：如果是1，表示这是消息的最后一个分片），如果是0，表示不是是消息的最后一个分片\r\n\r\nRSV1/RSV2/RSV3：默认为 0，仅当使用 extension 扩展时，由扩展决定其值\r\n\r\n`Mask`：表示是否要对数据载荷进行掩码操作\r\n\r\n`Opcode` 代表了帧的类型：\r\n\r\n- 持续帧\r\n  - 0 帧的类型和前一帧相同\r\n- 非控制帧\r\n\r\n\t- 1：文本帧（UTF8）\r\n\r\n\t- 2：二进制帧\r\n\r\n\t- 3-7：为非控制帧保留\r\n- 控制帧\r\n\t- 8：关闭帧\r\n\t- 9：心跳帧 ping\r\n\t- A：心跳帧 pong\r\n\t- B-F：为控制帧保留\r\n\r\n`Payload length` 表示消息内容的长度：\r\n\r\n- <= 125 字节，仅使用 `Payload len`\r\n- 126 至 $2^{16}-1$ 字节，`Payload len` 值为 126，`Extended payload length` 16位表示长度\r\n- $2^{16}$ 至 $2^{64}-1$字节，`Payload len` 值为 127，`Extended payload length` 共 8 字节 64 位表示长度\r\n\r\nPayload data：载荷数据，包括了扩展数据、应用数据\r\n\r\n## 数据分片\r\n\r\n当 WebSocket 的接收方收到一个数据帧时，会根据 `FIN` 的值来判断，是否已经收到消息的最后一个数据帧。\r\n\r\n- FIN=1表示当前数据帧为消息的最后一个数据帧，此时接收方已经收到完整的消息，可以对消息进行处理。\r\n\r\n- FIN=0，则接收方还需要继续监听接收其余的数据帧。\r\n\r\n![](http://oss.xiefeng.tech/img/20210404223607.png)\r\n\r\n`opcode` 在数据交换的场景下，表示的是数据的类型：\r\n\r\n- `0x01`表示文本\r\n- `0x02`表示二进制\r\n- `0x00` 表示延续帧，就是完整消息对应的数据帧还没接收完，帧的类型（文本/二进制）和前一个帧相同\r\n\r\n## 掩码\r\n\r\n从客户端向服务端发送数据时，需要对数据进行掩码操作；从服务端向客户端发送数据时，不需要对数据进行掩码操作。\r\n\r\n如果服务端接收到的数据没有进行过掩码操作，服务端需要断开连接。\r\n\r\n简单来说：\r\n\r\n- 客户端发出的消息：MASK 为 1（包括控制帧），传递 32 位无法预测的、随机的 Masking-key\r\n- 服务器端发出的消息：MASK 为 0\r\n\r\n**作用**：防止代理缓存污染攻击，恶意页面上的代码可以构造出合法的 GET 请求，使得代理服务器可以识别出请求并缓存响应\r\n\r\n![](http://oss.xiefeng.tech/img/20210405094233.png)\r\n\r\n## 心跳帧\r\n\r\nWebSocket为了保持客户端、服务端的实时双向通信，需要确保客户端、服务端之间的TCP通道保持连接没有断开。\r\n\r\n对于长时间没有数据往来的连接，采用心跳帧来检测连接是否断开。\r\n\r\n- 心跳帧可以插在数据帧中传输\r\n- ping 帧，opcode=9，可以含有数据\r\n- pong 帧，opcode=A，必须与 ping 帧数据相同\r\n\r\n- 发送方->接收方：ping\r\n- 接收方->发送方：pong\r\n\r\n## 关闭帧\r\n\r\n关闭会话的方式：\r\n\r\n1. 通过关闭帧双向关闭\r\n2. TCP 连接意外中断\r\n\r\n关闭帧格式：\r\n\r\n- opcode=8\r\n- 可以含有数据，但仅用于解释关闭会话的原因\r\n- 遵循 mask 掩码规则\r\n\r\n## 消息传递\r\n\r\n- WebSocket 会话处于 OPEN 状态\r\n- 以帧来承载消息，一条消息可以拆分多个数据帧\r\n- 客户端发送的帧必须基于掩码编码\r\n- 一旦发送或者接收到关闭帧，连接处于 CLOSING 状态\r\n- 一旦发送了关闭帧，且接收到关闭帧，连接处于 CLOSED 状态\r\n- TCP 连接关闭后，WebSocket 连接才完全被关闭\r\n\r\n","meta":{"size":5387,"birthTime":1663496641444.998,"updateTime":1663496641445.19}}},"__N_SSG":true}