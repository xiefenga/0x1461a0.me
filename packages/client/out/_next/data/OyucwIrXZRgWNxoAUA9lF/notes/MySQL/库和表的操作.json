{"pageProps":{"metaTitle":"库和表的操作","article":{"title":"库和表的操作","content":"# 库的操作\r\n\r\n## 库的创建\r\n\r\n```mysql\r\nCREATE DATABASE [IF NOT EXISTS] db1 [CHARACTER SET gbk];\r\n```\r\n\r\n## 库的修改\r\n\r\n### 修改库名\r\n\r\n> 这个语法在 MySQL 5.1.7 中被添加进来，到了 5.1.23 又去掉了。有可能丢失数据。\r\n\r\n```mysql\r\nRENAME DATABASE db1 TO db2;\r\n```\r\n\r\n### 修改字符集\r\n\r\n```mysql\r\nALTER DATABASE db1 CHARACTER SET gbk;\r\n```\r\n\r\n## 库的删除\r\n\r\n```mysql\r\nDROP DATABASE [IF EXISTS] db1;\r\n```\r\n\r\n# 表的操作\r\n\r\n## 表的创建\r\n\r\n通过 `CREATE TABLE` 创建表，需要传入字段名、类型、约束：\r\n\r\n```mysql\r\nCREATE TABLE books ( \r\n\tid INT PRIMARY KEY AUTO_INCREMENT, \r\n\t`name` CHAR ( 100 ) NOT NULL,\r\n\tauthor INT NOT NULL, \r\n\tprice DOUBLE NOT NULL,\r\n\tFOREIGN KEY(author) REFERENCES `authors`(id)\r\n);\r\n```\r\n\r\n- 约束可以有多个，依次添加使用空格隔开\r\n- 约束可以在创建表时添加，也可以在修改表时添加\r\n- 约束的添加分为**列级约束**和**表级约束**\r\n\t- **列级约束**即跟在字段、类型之后的约束，**表级约束**即字段定义之后的\r\n\t- 列级约束中外键约束没有效果，添加外键只能使用表级约束语法\r\n\t- 表级约束不支持非空和默认约束\r\n\r\n**表级约束完整语法**\r\n\r\n```mysql\r\n[CONSTRAINT 约束名] 约束类型(字段名)\r\n\r\nCONSTRAINT pk PRIMARY KEY(id)\t#主键\r\nCONSTRAINT uq UNIQUE(seat)\t#唯一键\r\nCONSTRAINT fk_stuinfo_major FOREIGN KEY(majorid) REFERENCES major(id)\t#外键\r\n```\r\n\r\n## 表的查看\r\n\r\n```mysql\r\nDESC employees;\r\n\r\nSHOW INDEX FROM employees;\r\n```\r\n\r\n- `DESC` 可以查看表的结构\r\n- `SHOW INDEX` 可以查看一张表的索引信息\r\n\r\n## 表的修改\r\n\r\n使用 `ALTER TABLE` 语句更改表的结构。\r\n\r\n### 表的重命名\r\n\r\n```mysql\r\nRENAME TABLE books to books_table;\r\n```\r\n\r\n### 列的增加\r\n\r\n- `FIRST` 指明在增加的列为第一列\r\n- `AFTER` 指明在指定的位置增加一列\r\n- 默认在增加为最后一列\r\n\r\n```mysql\r\nALTER TABLE vendors ADD COLUMN vend_phone CHAR ( 20 ) [NOT NULL] [FIRST] [AFTER 字段名];\r\n```\r\n\r\n### 列的重命名\r\n\r\n```mysql\r\nALTER TABLE products CHANGE COLUMN prod_name `name` CHAR(255);\r\n```\r\n\r\n### 列的删除\r\n\r\n```mysql\r\nALTER TABLE vendors DROP COLUMN vend_phone;\r\n```\r\n\r\n### 约束的修改\r\n\r\n#### 修改约束\r\n\r\n```mysql\r\nALTER TABLE 表名 MODIFY COLUMN 字段名 字段类型 新约束;\r\nALTER TABLE 表名 ADD [CONSTRAINT 约束名] 约束类型 (字段名) [外键的引用];\r\n```\r\n\r\n#### 删除约束\r\n\r\n删除一般的约束直接使用新的约束覆盖即可，对于键（主键、唯一键、外键）约束的删除，使用 `DROP ` 关键字\r\n\r\n1. 删除非空约束\r\n\r\n\t```mysql\r\n\tALTER TABLE stuinfo MODIFY COLUMN stuname VARCHAR ( 20 ) NULL;\r\n\t```\r\n\r\n2. 删除主键\r\n\r\n\t```mysql\r\n\tALTER TABLE stuinfo DROP PRIMARY KEY;\r\n\t```\r\n\r\n3. 删除唯一\r\n\r\n\t```mysql\r\n\tALTER TABLE stuinfo DROP INDEX seat;\r\n\t```\r\n\r\n4. 删除外键\r\n\r\n\t```mysql\r\n\tALTER TABLE stuinfo DROP FOREIGN KEY fk_stuinfo_major;\r\n\t```\r\n\r\n## 表的删除\r\n\r\n```mysql\r\nDROP TABLE books;\r\n```\r\n\r\n## 表的复制\r\n\r\n**仅复制结构**\r\n\r\n```mysql\r\nCREATE TABLE copy1 LIKE author;\r\n```\r\n\r\n**结构+数据**\r\n\r\n```mysql\r\nCREATE TABLE copy2 SELECT * FROM author;\r\n```\r\n\r\n**部分数据**\r\n\r\n```mysql\r\nCREATE TABLE copy3\r\nSELECT id, au_name\r\nFROM author \r\nWHERE nation='中国';\r\n```\r\n\r\n# 约束\r\n\r\n- NOT NULL：非空，用于保证该字段的值不能为空\r\n- DEFAULT：默认，用于保证该字段有默认值\r\n- PRIMARY KEY：主键，用于保证该字段的值具有唯一性，并且非空\r\n- UNIQUE：唯一，用于保证该字段的值具有唯一性，可以为空\r\n- CHECK：检查约束，MySQL中不支持\r\n- FOREIGN KEY：外键，用于限制两个表的关系，用于保证该字段的值必须来自于主表的关联列的值\r\n\r\n# 数据类型\r\n\r\n## 整数\r\n\r\n- `TINYINT`：1字节\r\n- `SMALLINT`：2字节\r\n- `MEDIUMINT`：3字节\r\n- `INT`、`INTEGER`：4字节\r\n- `BIGINT`：8字节\r\n\r\n特点：\r\n\r\n- 默认无符号数，如果想设置无符号，需要添加 `UNSIGNED` 关键字\r\n- 如果插入的数值超出了整型的范围,会报 out of range 异常，并且插入临界值\r\n- 可以设置长度，代表显示的最大宽度，如果不够会用0在左边填充，但需要搭配 `ZEROFILL`关键字\r\n\r\n```mysql\r\nCREATE TABLE tab_int(\r\n\tt1 INT(7) ZEROFILL,\r\n\tt2 INT(7) ZEROFILL \r\n);\r\n```\r\n\r\n## 小数\r\n\r\n1. 浮点数\r\n\t- `FLOAT(M, D)`：4字节\r\n\t- `DOUBLE(M, D)`：8字节\r\n2. 定点数\r\n\t- `DEC(M, D)`\r\n\t- `DECIMAL(M, D)`\r\n\r\n特点：\r\n\r\n- M：有效数字数的精度（总位数）\r\n- D：小数点后的位数\r\n- M和D都可以省略，DECIMAL类型M默认为10，D默认为0，FLOAT和DOUBLE，则会根据插入的数值的精度来决定精度\r\n- 如果超过范围，则插入临界值\r\n- 定点型的精确度较高\r\n\r\n## 字符\r\n\r\n**较短的字符**\r\n\r\n- `CHAR(M)`\r\n- `VARCHAR(M)`\r\n\r\n特点：\r\n\r\n- M 为最大的字符数，`CHAR` 的M可以省略默认为1，`VARCHAR` 的 M 必填\r\n- `CHAR` 存储的是固定长度的字符，`VARCHAR` 存储的是不固定长度的字符\r\n- `CHAR`的M值为 0-255，`VARCHAR`的M的取值为-65535\r\n\r\n**较长的文本**\r\n\r\n- `TEXT`\r\n- `BLOB`\r\n\r\n## 日期\r\n\r\n|    类型     | 大小（byte） |       最小值        |       最大值        |\r\n| :---------: | :----------: | :-----------------: | :-----------------: |\r\n|   `DATE`    |      4       |     1000-01-01      |     9999-12-31      |\r\n|   `TIME`    |      3       |     -838:59:59      |      838:59:59      |\r\n|   `YEAR`    |      1       |        1901         |        2155         |\r\n| `DATETIME`  |      8       | 1000-01-01 00:00:00 | 9999-12-31 23:59:59 |\r\n| `TIMESTAMP` |      4       |    1970010108000    |  2038年的某个时刻   |\r\n\r\n## 其他\r\n\r\n- `ENUM`：枚举类型，要求插入的值必须属于列表中指定的值之一\r\n- `SET`：和`ENUM`类型类似，里面可以保存0~64个成员。`SET` 类型一次可以选取多个成员，而 `Enum` 只能选一个\r\n\r\n```mysql\r\nCREATE TABLE tab_char ( c1 ENUM( 'a', 'b', 'c' ) );\r\nINSERT INTO tab_char VALUES('a');\r\nINSERT INTO tab_char VALUES('b');\r\nINSERT INTO tab_char VALUES('c');\r\n```\r\n\r\n```mysql\r\nCREATE TABLE tab_set ( s1 SET( 'a', 'b', 'c', 'd' ) );\r\nINSERT INTO tab_set VALUES('a');\r\nINSERT INTO tab_set VALUES('A,B');\r\nINSERT INTO tab_set VALUES('a,c,d');\r\n```\r\n\r\n- ","meta":{"size":6328,"birthTime":1663496641412.9211,"updateTime":1663496641413.0364}}},"__N_SSG":true}