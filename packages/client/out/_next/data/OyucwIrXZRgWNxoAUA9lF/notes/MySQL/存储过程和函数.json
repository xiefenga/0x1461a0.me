{"pageProps":{"metaTitle":"存储过程和函数","article":{"title":"存储过程和函数","content":"# 存储过程\r\n\r\n事先经过编译并存储在数据库中的一段 SQL 语句的集合。\r\n\r\n## 创建\r\n\r\n```mysql\r\nCREATE PROCEDURE myprocedure ()\r\nBEGIN\r\n\tSELECT\r\n\t\tavg( prod_price ) AS priceaverage \r\n\tFROM\r\n\tproducts;\r\nEND;\r\n```\r\n\r\n## 其他操作\r\n\r\n**调用**\r\n\r\n```mysql\r\nCALL myprocedure();\r\n```\r\n\r\n**删除**\r\n\r\n```mysql\r\nDROP PROCEDURE [IF EXISTS] myprocedure;\r\n```\r\n\r\n**查看**\r\n\r\n```mysql\r\nSHOW CREATE PROCEDURE test;\r\n```\r\n\r\n## 分隔符\r\n\r\n由于 MySQL 语句默认的分隔符和 MySQL 命令行实用程序的语句分隔符都是 `;`\r\n\r\n当通过命令行使用 MySQL 时，需要使用 `DELIMITER` 临时更改命令行默认的分隔符\r\n\r\n```shell\r\nmysql> delimiter $\r\nmysql> CREATE PROCEDURE test()\r\n    -> begin\r\n    -> SELECT\r\n    ->          avg( prod_price ) AS priceaverage\r\n    ->  FROM\r\n    ->  products;\r\n    -> end$\r\nQuery OK, 0 rows affected (0.39 sec)\r\n\r\nmysql> call test()$\r\n+--------------+\r\n| priceaverage |\r\n+--------------+\r\n|    16.133571 |\r\n+--------------+\r\n1 row in set (0.21 sec)\r\n\r\nQuery OK, 0 rows affected (0.21 sec)\r\n```\r\n\r\n## 参数\r\n\r\n参数列表包含三部分：参数模式、参数名、参数类型\r\n\r\n参数模式：\r\n\r\n- `IN`：该参数可以作为输入，该参数为传入的形参\r\n- `OUT`：该参数可以作为输出，也就是该参数就是返回值\r\n- `INOUT`：该参数既可以作为输入又可以作为输出，该参数既是传入的值，也是返回值\r\n\r\n```mysql\r\nCREATE PROCEDURE ordertotal (\r\n\tIN onumber INT,\r\n\tOUT ototal DECIMAL( 8, 2 )\r\n)\r\nBEGIN\r\n\tSELECT\r\n\t\tSUM( item_price * quantity ) \r\n\tFROM\r\n\t\torderitems \r\n\tWHERE\r\n\torder_num = onumber INTO ototal;\r\nEND;\r\n```\r\n\r\n调用时可以直接定义并使用变量，不需要预先定义再使用：\r\n\r\n```mysql\r\nCALL ordertotal ( 20005, @total );\r\nSELECT @total;\r\n+--------+\r\n| @total |\r\n+--------+\r\n| 149.87 |\r\n+--------+\r\n```\r\n\r\n# 函数\r\n\r\n和存储过程一样都是事先经过编译并存储在数据库中的一段 SQL 语句的集合。\r\n\r\n## 创建\r\n\r\n```mysql\r\nCREATE FUNCTION employeeNum() RETURNS INT\r\nBEGIN\r\n\tDECLARE num INT DEFAULT 0; -- 定义局部变量\r\n\tSELECT\r\n\t\tCOUNT(*) INTO num -- 赋值操作\r\n\tFROM\r\n\t\temployees;\r\n\tRETURN num;\t-- 返回\r\nEND;\r\n```\r\n\r\n## 其他操作\r\n\r\n**调用**\r\n\r\n```mysql\r\nSELECT employeeNum() AS num;\r\n```\r\n\r\n**删除**\r\n\r\n```mysql\r\nDROP FUNCTION employeeNum;\r\n```\r\n\r\n**查看**\r\n\r\n```mysql\r\nSHOW CREATE FUNCTION employeeNum;\r\n```\r\n\r\n## 参数\r\n\r\n参数列表包含两部分：参数名、参数类型\r\n\r\n函数必须要有 `RETURN` 语句，如果没有会报错，`RETURN` 语句可以不放在最后。\r\n\r\n```mysql\r\nCREATE FUNCTION employeeSalary (`name` VARCHAR ( 20 )) RETURNS DOUBLE\r\nBEGIN\r\n\tSET @sal = 0;\r\n\tSELECT\r\n\t\tsalary INTO @sal\r\n\tFROM\r\n\t\temployees \r\n\tWHERE\r\n\t\tlast_name = `name`;\r\n\tRETURN @sal;\r\nEND;\r\n```\r\n\r\n## 1418错误\r\n\r\n在创建函数时可能会出现这样的错误：\r\n\r\n> ERROR 1418 (HY000): This function has none of DETERMINISTIC, NO SQL, or READS SQL DATA in its declaration and binary logging is enabled (you *might* want to use the less safe log_bin_trust_function_creators variable)\r\n\r\n这是我们开启了 bin-log, 我们必须指定该函数是否是：\r\n\r\n- DETERMINISTIC \r\n- NO SQL\r\n- READS SQL DATA\r\n- MODIFIES SQL DATA\r\n- CONTAINS SQL\r\n\r\n在函数中只有 DETERMINISTIC, NO SQL 和 READS SQL DATA 被支持。\r\n\r\n如果我们开启了 bin-log，我们就必须为我们的函数指定一个参数。\r\n\r\n或者：\r\n\r\n```mysql\r\nSET GLOBAL log_bin_trust_function_creators = TRUE;\r\n```\r\n\r\n# 变量\r\n\r\n- 系统变量\r\n\t- 全局变量\r\n\t- 会话变量\r\n- 自定义变量\r\n\t- 用户变量\r\n\t- 局部变量\r\n\r\n## 系统变量\r\n\r\n系统变量由系统定义，不是用户定义，属于服务器层面。\r\n\r\n根据级别分为全局变量和会话变量，在操作时分别需要使用关键字 `GLOBAL` 和 `SESSION`，省略默认为会话级别。\r\n\r\n### 查看所有\r\n\r\n```mysql\r\nSHOW GLOBAL VARIABLES;\r\nSHOW [SESSION] VARIABLES;\r\n```\r\n\r\n### 查看部分\r\n\r\n```mysql\r\nSHOW GLOBAL VARIABLES LIKE '%char%';\r\n```\r\n\r\n### 查看指定\r\n\r\n```mysql\r\nSELECT @@GLOBAL.character_set_client;\r\n```\r\n\r\n当省略 `SESSION` 时查看变量：\r\n\r\n```mysql\r\nSELECT @@autocommit;\r\n```\r\n\r\n### 赋值\r\n\r\n```mysql\r\nSET @@GLOBAL.autocommit = 0;\r\n\r\nSET GLOBAL autocommit = 0;\r\n```\r\n\r\n## 自定义变量\r\n\r\n自定义变量由用户自定义，而不是系统提供的。\r\n\r\n根据作用域分为：用户变量和局部变量。\r\n\r\n- 用户变量在当前会话全局有效，等同于会话变量\r\n- 局部变量仅仅在定义它的 `BEGIN` 和 `END` 块中有效，也只能定义在 `BEGIN` 和 `END` 块中开始\r\n- 变量都是以 `@` 开始\r\n\r\n### 声明\r\n\r\n用户变量的声明和赋值语法相同，也就是声明时就需要初始化。\r\n\r\n局部变量只能定义在 `BEGIN` 和 `END` 块头部，而且如果没有初始化则默认值为 `NULL`\r\n\r\n**用户变量**\r\n\r\n```mysql\r\nSET @val1 = 'val1';\r\nSET @val2 := 'val2';\r\nSELECT @val3 := 'val3';\r\n```\r\n\r\n**局部变量**\r\n\r\n```mysql\r\nDECLARE @val1 VARCHAR(20);\r\nDECLARE @val2 VARCHAR(20) DEFAULT 'val2';\r\n```\r\n\r\n### 赋值\r\n\r\n```mysql\r\nSET @val1 = 'val';\r\nSET @val2 := 'val';\r\nSELECT @val3 := 'val';\r\n```\r\n\r\n**查询赋值**\r\n\r\n```mysql\r\nSET @num = 0;\r\nSELECT COUNT(*) INTO @num FROM employees;\r\n-- 或者\r\nSELECT COUNT(*) FROM employees INTO @num;\r\n```\r\n\r\n两种方式都能完成赋值，区别是：\r\n\r\n- `INTO` 放在前面查询结果直接赋值给变量，没有查询结果\r\n- `INTO` 放在后面，既有查询结果也成功赋值\r\n\r\n### 使用\r\n\r\n```mysql\r\nSELECT @val;\r\n```\r\n\r\n# 流程控制\r\n\r\n## 分支结构\r\n\r\n### IF函数\r\n\r\n和三元表达式类似，三个参数可以都是表达式，可以用在任何地方\r\n\r\n```mysql\r\nSELECT IF(1, 2, 3);\r\n```\r\n\r\n### CASE语句\r\n\r\n不仅可以用在 `BEGIN` 和 `END` 块中，还可以用户  `BEGIN` 和 `END` 块外\r\n\r\n```mysql\r\nSELECT salary AS 原始工资, department_id,\r\n\tCASE department_id \r\n\t\tWHEN 30 THEN salary * 1.1 \r\n\t\tWHEN 40 THEN salary * 1.2 \r\n\t\tWHEN 50 THEN salary * 1.3\r\n\t\tELSE salary \r\n\tEND AS 新工资 \r\nFROM\r\n\temployees;\r\n```\r\n\r\n### IF语句\r\n\r\n只能应用在 `BEGIN` 和 `END` 块中\r\n\r\n```mysql\r\nCREATE FUNCTION test_if(score FLOAT) RETURNS CHAR\r\nBEGIN\r\n\tDECLARE ch CHAR DEFAULT 'A';\r\n\tIF \t\tscore>90 \tTHEN SET ch='A';\r\n\tELSEIF \tscore>80 \tTHEN SET ch='B';\r\n\tELSEIF \tscore>60 \tTHEN SET ch='C';\r\n\tELSE SET ch='D';\r\n\tEND IF;\r\n\tRETURN ch;\r\nEND;\r\n```\r\n\r\n## 循环结构\r\n\r\n每一种循环前都可以添加一个标签，方便在循环体内跳出。\r\n\r\n- `ITERATE`：类似于 `continue`，后面需要加 label\r\n- `LEAVE`：类似于 `break`，后面需要加 label\r\n\r\n### WHILE\r\n\r\n```mysql\r\n[label:] WHILE search_condition DO\r\n\tstatement_list\r\nEND WHILE [label];\r\n```\r\n\r\n### LOOP\r\n\r\n```mysql\r\n[label: ]LOOP\r\n\tstatement_list\r\n\tIF exit_condition THEN LEAVE label; \r\n\tEND IF; \r\nEND LOOP [label];\r\n```\r\n\r\n### REPEAT\r\n\r\n```mysql\r\n[label:] REPEAT\r\n\tstatement_list\r\nUNTIL search_condition\r\nEND REPEAT [label];\r\n```\r\n\r\n\r\n\r\n","meta":{"size":6954,"birthTime":1663496641412.5667,"updateTime":1663496641412.672}}},"__N_SSG":true}