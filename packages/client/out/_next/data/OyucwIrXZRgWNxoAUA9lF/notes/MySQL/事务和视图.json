{"pageProps":{"metaTitle":"事务和视图","article":{"title":"事务和视图","content":"# 事务\r\n\r\n事务处理是一种机制，用来管理必须成批执行的MySQL操作，以保证数据库不包含不完整的操作结果。\r\n\r\n## 属性\r\n\r\n1. 原子性：事务是一个不可分割的工作单位，事务中的操作要么都发生，要么都不发生\r\n2. 一致性：事务必须使数据库从一个一致性状态变换到另外一个一致性状态\r\n3. 隔离性：一个事务内部的操作及使用的数据对并发的其他事务是隔离的，并发执行的各个事务之间不能互相干扰\r\n4. 持久性：一个事务一旦被提交，它对数据库中数据的改变就是永久性的，接下来的其他操作和数据库故障不应该对其有任何影响\r\n\r\n## 术语\r\n\r\n- 事务：一组 SQL 语句\r\n- 回退：撤销指定 SQL 语句的过程\r\n- 提交：将为存储的 SQL 语句结果写入数据库表\r\n- 保留点：事务处理中设置的临时占位符，可以回退到保留点\r\n\r\n## 类别\r\n\r\n**隐式事务**：事务没有明显的开启和结束的标记\r\n\r\n- 默认的 MySQL 行为是自动提交所有的更改，也就是隐式的事务。\r\n\r\n- 像 `INSERT`、`UPDATE`、`DELETE` 语句都会自动提交。\r\n\r\n**显式事务**：事务具有明显的开启和结束的标记\r\n\r\n- 必须先设置自动提交功能为禁用\r\n- `SET autocommit = 0;`\r\n\r\n## 隔离\r\n\r\n### 并发问题\r\n\r\n对于同时运行的多个事务, 当这些事务访问数据库中相同的数据时, 如果没有采取必要的隔离机制, 就会导致各种并发问题\r\n\r\n对于两个事务T1、T2\r\n\r\n- 脏读：T1读取的是已经被T2更新但还没有被提交的字段，若T2 回滚,，T1读取的内容就是临时且无效的\r\n- 不可重复读：T1读取了一个字段，然后T2更新提交了该字段，T1再次读取同一个字段， 值就不同了\r\n- 幻读：T1从一个表中读取了一个字段， 然后T2在该表中插入了一些新的行，如果T1再次读取同一个表,，就会多出几行\r\n\r\n### 隔离级别\r\n\r\n数据库系统必须具有隔离并发运行各个事务的能力, 使它们不会相互影响, 避免各种并发问题。\r\n\r\n一个事务与其他事务隔离的程度称为隔离级别：\r\n\r\n- `READ UNCOMMITTED`：读取未提交的数据\r\n- `READ COMMITTED`：读取已提交的数据\r\n- `REPEATABLE READ`：可重复读，确保事务可以多次从一个字段中读取相同的值，在这个事务持续期间禁止其他事务对该字段的更新\r\n- `SERIALIZABLE`：串行化，在该事务的持续期间禁止其他事务对该表执行插入、更新、删除，解决了所有并发问题，性能低\r\n\r\nMySQL默认隔离级别为 `REPEATABLE READ`\r\n\r\n每个数据库连接都有一个全局变量 `@@tx_isolation`, 表示当前的事务隔离级别\r\n\r\n- 查看当前的隔离级别：`SELECT @@tx_isolation;`\r\n\r\n- 设置当前 MySQL 连接的隔离级别：`SET TRANSACTION ISOLATION LEVEL READ COMMITTED;`\r\n\r\n- 设置数据库系统的全局的隔离级别：`SET globaltransaction ISOLATION LEVEL READ COMMITTED;`\r\n\r\n## 创建\r\n\r\n- 使用 `START TRANSACTION` 标识开始事务\r\n- 使用 `ROLLBACK` 回退操作\r\n\t- `ROLLBACK` 回退整个操作\r\n\t- `ROLLBACK TO savepointname` 回退到保留点\r\n- 使用 `COMMIT` 执行提交操作\r\n- 使用 `SAVEPOINT` 创建保留点\r\n- `ROLLBACK` 和 `COMMIT` 都会结束事务\r\n\r\n```mysql\r\nSET autocommit = 0; -- 关闭自动提交\r\nSTART TRANSACTION;\t-- 开始事务\r\nDELETE \r\nFROM\r\n\torderitems \r\nWHERE\r\n\torder_num = 20010;\r\nSAVEPOINT delete1;\t-- 设置保留点\r\nDELETE \r\nFROM\r\n\torders \r\nWHERE\r\n\torder_num = 20010;\r\nCOMMIT;\t-- 提交\r\nROLLBACK;\t-- 整个回退\r\nROLLBACK TO delete1;\t-- 回退到保留点\r\n```\r\n\r\n**回退的要求**\r\n\r\n- `INSERT`、`UPDATE`、`DELETE` 可以回退\r\n- `CREATE`、`DROP`、`TRANSACTION` 回退无法被撤销\r\n\r\n# 视图\r\n\r\n视图是一种虚拟存在的表，是用来查看存储在别处的数据的一种方式，视图本身不包含数据。\r\n\r\n本质上视图就是一些 SQL 语句，使用时就使用这些 SQL 语句查询并返回查询结果。\r\n\r\n视图使用和使用表一样，同样可以进行增删改查，但一般不增删改只是用于查询。\r\n\r\n## 创建\r\n\r\n```mysql\r\nCREATE VIEW myv1 AS \r\nSELECT\r\n    last_name,\r\n    department_name,\r\n    job_title \r\nFROM\r\n\temployees e\r\n\tJOIN departments d ON e.department_id = d.department_id\r\n\tJOIN jobs j ON j.job_id = e.job_id;\r\n```\r\n\r\n## 使用\r\n\r\n```mysql\r\nSELECT\r\n\t* \r\nFROM\r\n\tmyv1 \r\nWHERE\r\n\tlast_name LIKE '%a%';\r\n```\r\n\r\n## 修改\r\n\r\n**方式一**\r\n\r\n```mysql\r\nCREATE OR REPLACE VIEW 视图名 AS 查询语句;\r\n```\r\n\r\n**方式二**\r\n\r\n```mysql\r\nALTER VIEW 视图名 AS 查询语句;\r\n```\r\n\r\n## 删除\r\n\r\n```mysql\r\nDROP VIEW emp_v1, emp_v2, myv3;\r\n```\r\n\r\n## 更新\r\n\r\n更新一个视图会更新其基表，因为视图和表的使用是一样的所以更新的语法也相同。\r\n\r\n大部分情况都不能更新视图：\r\n\r\n- 分组\r\n- 连接\r\n- 子查询\r\n- 联合查询\r\n- 聚集函数\r\n- `DISTINCT`\r\n\r\n```mysql\r\n-- 插入\r\nINSERT INTO myv1 VALUES ( '张飞', 'zf@qq.com' );\r\n-- 修改\r\nUPDATE myv1  SET last_name = '张无忌' WHERE last_name = '张飞';\r\n-- 删除\r\nDELETE FROM myv1 WHERE last_name = '张无忌';\r\n```\r\n\r\n","meta":{"size":5178,"birthTime":1663496641412.3164,"updateTime":1663496641412.493}}},"__N_SSG":true}