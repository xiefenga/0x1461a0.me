{"pageProps":{"metaTitle":"类型系统","article":{"title":"类型系统","content":"## 类型系统\n\n类型系统就是：对类型进行定义、检查和处理的系统。\n\n类型系统完全是一种工具，编译器在编译时对数据做静态检查，或者语言在运行时对数据做动态检查的时候，来保证某个操作处理的数据是开发者期望的数据类型\n\n**类型安全**是指：代码只能按照被允许的方法，访问它被授权访问的内存\n\n### 分类\n\n按定义后类型是否可以**隐式转换**，可以分为**强类型**和**弱类型** \n\n- Rust 不同类型间不能自动转换，所以是强类型语言\n- C / C++ / JavaScript 会自动转换，是弱类型语言\n\n按**类型检查的时机**（在编译时检查还是运行时检查），可以分为**静态类型**系统和**动态类型**系统\n\n- Rust / C / C++ / Java 是静态类型语言\n- JavaScript / Python 是动态类型语言\n\n绝大多数支持静态类型系统的语言同时也会支持动态类型系统，因为单纯靠静态类型无法支持运行时的类型转换，比如里氏替换原则。里氏替换原则简单说就是子类型对象可以在程序中代替父类型对象。它是运行时多态的基础。所以如果要支持运行时多态，以及动态分派、后期绑定、反射等功能，编程语言需要支持动态类型系统。\n\n？？？对于静态类型系统，还可以进一步分为显式静态和隐式静态\n\n- Rust / Java / Swift 等语言都是显式静态语言\n- Haskell 是隐式静态语言\n\n### 多态\n\n**多态**在类型系统中是一个非常重要的思想，它是指在**使用相同的接口时，不同类型的对象具有不同的实现** \n\n对于动态类型系统，多态通过**鸭子类型**（duck typing）实现；\n\n对于静态类型系统，多态可以通过**参数多态**、**特设多态**和**子类型多态**实现\n\n- 参数多态是指：代码操作的类型是一个满足某些约束的参数，而非具体的类型\n- 特设多态是指：同一种行为有多个不同实现的多态\n  - 比如加法，可以 1+1，也可以是 “abc” + “cde”、matrix1 + matrix2、甚至 matrix1 + vector1\n  - **函数重载**和**运算符重载**都是特设多态的一种\n- 子类型多态是指：运行时子类型可以被当成父类型使用\n\n在 Rust 中，参数多态通过泛型来支持、特设多态通过 trait 来支持、子类型多态可以用 trait object 来支持\n\n![](https://static001.geekbang.org/resource/image/09/15/09ea90a4df9fb7652389f611412c1715.jpg?wh=3175x1490)\n\n## rust类型系统\n\nRust 是**静态强类型**语言，并且是**类型安全**的，在代码中**类型无处不在**。\n\n1. Rust 是强类型语言，不会出现不小心引入的**隐式转换**导致读取不正确的数据，甚至内存访问越界的问题\n2. Rust 进一步对内存的访问进行了读 / 写分开的授权：代码只能按照被允许的方法和被允许的权限，访问它被授权访问的内存\n\n为了实现严格的类型安全，Rust 中除了 `let` / `fn` / `static` / `const` 这些定义性**语句**外，其余都是**表达式** \n\nRust 中的一个作用域（`if` / `else` / 循环 / 函数 / ...），最后一个表达式的返回值就是作用域的返回值，如果表达式或者函数不显示返回任何值，那么它返回一个 `()`。\n\n因为一切表达式都有类型，可以说在 Rust 中，类型无处不在。\n\n### 类型推导\n\n为了减少类型标注的负担，Rust 提供了**类型推导**，编译器可以根据变量使用的上下文，推导出变量的类型。\n\n```rust\nlet mut map = std::collections::BTreeMap::new(); // map: BTreeMap<&str, &str> \nmap.insert(\"hello\", \"world\");\nprintln!(\"map: {:?}\", map);\n```\n\n但是 Rust 编译器进行类型推导需要**足够的上下文**，有时需要手动提供标注\n\n```rust\nlet numbers = vec![1, 2, 3, 4, 5, 6, 7, 8, 9, 10];\n\nlet even_numbers: Vec<_> = numbers\n\t\t.into_iter()\n\t\t.filter(|n| n % 2 == 0)\n\t\t.collect();\n\nprintln!(\"{:?}\", even_numbers);\n```\n\n> `collect` 是 `Iterator` trait 的方法，用于将一个迭代器转换成一个集合\n>\n> 由于 `collect` 可以转换为任意类型，编译器是无法从上下文中推断，需要显式标注集合的类型\n>\n> 但集合类型内部元素的类型，编译器可以根据上下文得出，可以使用 `_` 省略\n\n除了给变量标注一个显式的类型外，也可以使用 `::<T>` 语法让函数返回一个明确的类型\n\n```rust\nlet even_numbers = numbers\n    .into_iter()\n    .filter(|n| n % 2 == 0)\n    .collect::<Vec<_>>();\n\nuse std::net::SocketAddr;\nlet addr = \"127.0.0.1:8080\".parse::<SocketAddr>().unwrap();\nprintln!(\"addr: {:?}, port: {:?}\", addr.ip(), addr.port());\n```\n\n在泛型函数后使用 `::<T>` 来强制使用类型 `T` 的这种写法被称为 turbofish\n\nturbofish 的写法在很多场景都有优势，因为在某些上下文中，你想直接把一个表达式传递给一个函数或者当成一个作用域的返回值\n\n```rust\nmatch data {\n    Some(s) => v.parse::<User>()?,\n    _ => return Err(...),\n}\n```\n\n### 泛型\n\nRust 对泛型函数会进行单态化（Monomorphization）处理，也就是在编译时，把所有用到的泛型函数的泛型参数展开，生成若干个函数。\n\n单态化的好处是，泛型函数的调用是静态分派（static dispatch），在编译时就一一对应，既保有多态的灵活性，又没有任何效率的损失，和普通函数调用一样高效\n\n单态化有很明显的坏处，就是编译速度很慢，一个泛型函数，编译器需要找到所有用到的不同类型，一个个编译\n\n编出来的二进制会比较大，因为泛型函数的二进制代码实际存在 N 份\n\n因为单态化，代码以二进制分发会损失泛型的信息\n\n\n\n静态分派\n\n动态分派\n\n\n\n### trait\n\ntrait 是 rust 中的接口，定义了类型使用这个接口的行为。\n\ntrait 是行为的延迟绑定。我们可以在不知道具体要处理什么数据结构的前提下，先通过 trait 把系统的很多行为约定好。\n\n**孤儿原则**：如果你想要为类型 `A` 实现特征 `T`，那么 `A` 或者 `T` 至少有一个是在当前作用域中定义的\n\n#### trait object\n\nRust 虽然没有父类和子类，但 trait 和实现 trait 的类型之间也是类似的关系，所以 Rust 也可以做子类型多态\n\nRust 通过 Trait Object 实现子类型多态，Trait Object 表现为 `&dyn Trait` 或者 `Box<dyn Trait>` \n\n`dyn` 关键字的目的只是用来帮助我们更好地区分普通类型和 Trait 类型\n\n要有一种手段告诉编译器，此处需要并且仅需要任何实现了某个接口的数据类型\n\n```rust\nfn returns_summarizable(switch: bool) -> impl Summary {\n  if switch {\n    Post {}\n  } else {\n    Weibo {}\n  }\n}\n\n// -->\nfn returns_summarizable<T: Summary>(switch: bool) -> T\n\ntrait Formatter {\n    fn format(&self, input: &mut String) -> bool;\n}\n\n\nfn format(input: &mut String, formatters: Vec<???>) {\n    for formatter in formatters {\n        formatter.format(input);\n    }\n}\n```\n\n使用 trait object 实现动态分派\n\n```rust\nfn format(input: &mut String, formatters: Vec<&dyn Formatter>) { \n  for formatter in formatters { \n    formatter.format(input); \n  }\n}\n\nlet mut text = \"Hello world!\".to_string();\nlet html: &dyn Formatter = &HtmlFormatter;\nlet rust: &dyn Formatter = &RustFormatter;\nlet formatters = vec![html, rust];\nformat(&mut text, formatters);\n\nprintln!(\"text: {}\", text);\n```\n\n##### 实现机理\n\nTrait Object 的底层逻辑就是胖指针。其中，一个指针指向数据本身，另一个则指向虚函数表（vtable）\n\n```rust\nlet html: &dyn Formatter = &HtmlFormatter;\nlet rust: &dyn Formatter = &RustFormatter;\n\nprintln!(\"HtmlFormatter: {}\", std::mem::size_of::<HtmlFormatter>()); // 0\n\nprintln!(\n  \"html: {} rust: {}\",\n  std::mem::size_of_val(&html), // 16 size_of::<usize> * 2\n  std::mem::size_of_val(&rust)  // 16 size_of::<usize> * 2\n);\n```\n\nRust 在编译时会为使用了 trait object 类型的 trait 实现生成一张表，放在可执行文件中（一般在 TEXT 或 RODATA 段），vtable 是一张静态的表\n\n这张表里包含具体类型的一些信息，如 size、aligment 以及一系列函数指针：\n\n- 该接口支持的所有的方法，当通过 trait object 使用方法时可以从表中找到\n- 具体类型的 drop trait，当 Trait object 被释放，用来释放其使用的所有资源\n\n![](https://static001.geekbang.org/resource/image/49/1d/4900097edab0yye11233e14ef857be1d.jpg?wh=2248x1370)\n\n##### 对象安全\n\n使用 trait object 的时候要注意对象安全，只有满足对象安全的 trait 才能使用 trait object。\n\n**如果 trait 所有的方法，返回值是 Self 或者携带泛型参数，那么这个 trait 就不能产生 trait object。**\n\n- 不允许返回 Self，是因为 trait object 在产生时，原来的类型会被抹去，所以 Self 究竟是谁不知道\n- 不允许携带泛型参数，是因为 Rust 里带泛型的类型在编译时会做单态化，而 trait object 是运行时的产物，两者不能兼容\n\nC++ / Java 指向 vtable 的指针，在编译时放在类结构里，而 Rust 放在 Trait object 中。这也是为什么 Rust 很容易对原生类型做动态分派，而 C++/Java 不行\n\n事实上，Rust 也并不区分原生类型和组合类型，对 Rust 来说，所有类型的地位都是一致的\n\nhttps://static001.geekbang.org/resource/image/59/e6/59bd1c6f90b99e9604e6602e33a622e6.jpg?wh=2375x2173\n\n#### 特征派生\n\n使用 `#[derive(_)]` 宏可以让对应的类型派生出对应 trait 的默认实现\n\n#### 标记trait\n\n标记 trait：这样的 trait 没有任何行为，但可以用作 trait bound 来进行类型安全检查\n\n例如：`Copy` trait\n\n```rust\npub trait Copy: Clone {\n    // Empty.\n}\n```\n\nRust 还支持其它几种标记 trait：Sized / Send / Sync / Unpin。\n\n\n\nSized trait 用于标记有具体大小的类型。在使用泛型参数时，Rust 编译器会自动为泛型参数加上 Sized 约束\n\n因为这样定义出的泛型结构，在编译期，大小是固定的，可以作为参数传递给函数。如果没有这个约束，T 是大小不固定的类型， process_data 函数会无法编译。\n\n```rust\nstruct Data<T> {\n    inner: T,\n}\n\nfn process_data<T>(data: Data<T>) {\n    todo!();\n}\n\n// ==>\n\n\nstruct Data<T: Sized> {\n    inner: T,\n}\n\nfn process_data<T: Sized>(data: Data<T>) {\n    todo!();\n}\n```\n\n在少数情况下，需要 T 是可变类型的，怎么办？Rust 提供了 ?Sized 来摆脱这个约束\n\n如果开发者显式定义了T: ?Sized，那么 T 就可以是任意大小\n\n```rust\n\npub enum Cow<'a, B: ?Sized + 'a> where B: ToOwned,\n{\n  // 借用的数据\n  Borrowed(&'a B),\n  // 拥有的数据\n  Owned(<B as ToOwned>::Owned),\n}\n```\n\n这样 B 就可以是 [T] 或者 str 类型，大小都是不固定的。要注意 Borrowed(&'a B) 大小是固定的，因为它内部是对 B 的一个引用，而引用的大小是固定的\n\n#### 类型转换\n\nRust 中提供了用于类型转换的 trait，为不同的类型之间实现该 trait，调用统一的方法即可完成转换。\n\n这种实现方式符合**开闭原则**：软件中的对象（类、模块、函数等等）对扩展是开放的，但是对修改是封闭的。\n\n根据值类型的转换和引用类型的转换，Rust 提供了两套 trait：\n\n- 值类型到值类型的转换：`From<T>` / `Into<T>` / `TryFrom<T>` / `TryInto<T>` \n- 引用类型到引用类型的转换：`AsRef<T>` / `AsMut<T>` \n\n##### 值类型转换\n\n```rust\npub trait From<T> {\n    fn from(T) -> Self;\n}\n\npub trait Into<T> {\n    fn into(self) -> T;\n}\n```\n\n由于在实现 `From<T>` 的时候会自动实现 `Into<T>` \n\n```rust\nimpl<T, U> Into<U> for T where U: From<T> {\n    fn into(self) -> U {\n        U::from(self)\n    }\n}\n```\n\n大部分情况下，只用实现 `From<T>`，然后这两种方式都能做数据转换：\n\n```rust\nlet s = String::from(\"Hello world!\");\nlet s: String = \"Hello world!\".into();\n```\n\n`From<T>` 和 `Into<T>` 是自反的：把类型 T 的值转换成类型 T，会直接返回。因为标准库有如下的实现：\n\n```rust\nimpl<T> From<T> for T {\n    fn from(t: T) -> T {\n        t\n    }\n}\n```\n\n如果数据类型在转换过程中有可能出现错误，可以使用 `TryFrom<T>` / `TryInto<T>`。\n\n用法和 `From<T>` / `Into<T>` 一样，多了个关联类型 `Error` 返回结果为 `Result<T, Self::Error>` \n\n##### 引用类型转换\n\n```rust\npub trait AsRef<T> where T: ?Sized {\n    fn as_ref(&self) -> &T;\n}\n\npub trait AsMut<T> where T: ?Sized {\n    fn as_mut(&mut self) -> &mut T;\n}\n```\n\n在特征的定义上，都允许 `T` 使用大小可变的类型，如 `str`、`[u8]` 等\n\n`AsRef<T>` 的使用和实现例子：\n\n```rust\nenum Language {\n  Rust,\n  TypeScript,\n  Elixir,\n  Haskell,\n}\n\nimpl AsRef<str> for Language {\n  fn as_ref(&self) -> &'static str {\n    match self {\n      Language::Rust => \"Rust\",\n      Language::TypeScript => \"TypeScript\",\n      Language::Elixir => \"Elixir\",\n      Language::Haskell => \"Haskell\",\n    }\n  }\n}\n\nfn print_ref<T: impl AsRef<str>>(v: T) {\n  println!(\"{}\", v.as_ref());\n}\n\nlet lang = Language::Rust;\nprint_ref(lang); // 自定义的 enum 实现了 AsRef<str>\nprint_ref(\"Hello world!\");  // &str 实现了 AsRef<str>\nprint_ref(\"Hello world!\".to_string());  // String 实现了 AsRef<str>\n```\n\n#### 默认值\n\n`Default` trait 用于为类型提供缺省值，可以通过 derive 宏 `#[derive(Default)]` 来生成实现，只要类型中的每个字段都实现了该 trait。\n\n在初始化一个数据结构时，我们可以部分初始化，然后剩余的部分使用 `..Default::default()` \n\n```rust\npub trait Default {\n    fn default() -> Self;\n}\n```\n\n\n","meta":{"size":13715,"birthTime":1663496641425.656,"updateTime":1663496641425.989}}},"__N_SSG":true}