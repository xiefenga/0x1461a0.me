{"pageProps":{"metaTitle":"多线程","article":{"title":"多线程","content":"## 消息传递\n\n**消息传递**是一个日益流行的确保安全并发的方式，Rust 在标准库里提供了 `channel` 来实现消息传递\n\n标准库提供了 `std::sync::mpsc` 创建 `channel` \n\n```rust\nuse std::sync::mpsc;\nuse std::thread;\n\nlet (tx, rx) = mpsc::channel();\n\nthread::spawn(move || tx.send(1).unwrap());\n\nprintln!(\"receive {}\", rx.recv().unwrap());\n```\n\n`mpsc` 代表**多个生产者，单个消费者**，即 *multiple producer, single consumer* \n\n所以标准库实现的信道可以有多个**发送**端，但只能有一个消费这些值的**接收**端\n\n`mpsc::channel` 返回一个元组：`(发送端，接收端)` \n\n历史原因，`tx` 和 `rx` 通常作为 **发送者**（*transmitter*）和 **接收者**（*receiver*）的缩写\n\n### 发送端\n\n发送端通过 `send` 方法发送数据，发送端类型为 `mpsc::Sender<T>`，该通道只能传递对应类型的值\n\n`send`方法返回一个 `Result<T,E>`，说明它有可能返回一个错误\n\n例如接收者被 `drop` 导致了没有接收端，此时继续发送毫无意义，返回一个错误最为合适\n\n```rust\nlet (tx, rx) = mpsc::channel();\nlet tx1 = tx.clone();\n\nthread::spawn(move || tx.send(String::from(\"hi from tx\")).unwrap());\n\nthread::spawn(move || tx1.send(String::from(\"hi from tx1\")).unwrap());\n```\n\n### 接收端\n\n接收端有两个接收的方法：`recv` 和 `try_recv` \n\n`try_recv` 尝试接收一次消息，该方法并**不会阻塞线程**，当通道中没有消息时，它会立刻返回一个错误\n\n```rust\nlet (tx, rx) = mpsc::channel();\n\nthread::spawn(move || tx.send(1).unwrap());\n\nprintln!(\"receive {:?}\", rx.try_recv()); // receive Err(Empty)\n```\n\n`recv` 方法会**阻塞当前线程**，直到读取到值或者通道被关闭\n\n`recv` 也返回一个`Result<T, E>`，当所有发送端都 `drop` 了就会返回 `Err` 表明不会再有新消息了\n\n可以使用 `for` 循环**阻塞**的从 `rx` **迭代器**中接收消息，当收到错误时结束循环\n\n需要注意的是只有当所有的发送端都 `drop` 之后才会收到错误结束循环\n\n```rust\nlet (tx, rx) = mpsc::channel();\nlet txs = [tx.clone(), tx.clone()];\n\n// important\ndrop(tx);\n\nfor (i, tx) in txs.into_iter().enumerate() {\n  thread::spawn(move || tx.send(format!(\"hello from tx{}\", i)).unwrap());\n}\n\nfor received in rx {\n  println!(\"Got: {}\", received);\n}\n```\n\n### 消息通道\n\n标准库的 `mpsc` 通道分为两种类型：同步和异步\n\n`mpsc::channel` 创建的是异步通道，其含义为：发送端不会被接收端阻塞\n\n同步通道通过 `mpsc::sync_channel` 创建，特点是**发送消息是阻塞的，在消息被接收后才解除阻塞 **\n\n```rust\nlet (tx, rx)= mpsc::sync_channel(0);\n\nlet handle = thread::spawn(move || {\n  println!(\"发送之前\");\n  tx.send(1).unwrap();\n  println!(\"发送之后\");\n});\n\nprintln!(\"睡眠之前\");\nthread::sleep(Duration::from_secs(3));\nprintln!(\"睡眠之后\");\n\nprintln!(\"receive {}\", rx.recv().unwrap());\nhandle.join().unwrap();\n```\n\n运行结果为：\n\n```\n睡眠之前\n发送之前\n睡眠之后\nreceive 1\n发送之后\n```\n\n`mpsc::sync_channel` 需要传递一个参数，用来指定同步通道的消息缓存条数\n\n当消息缓冲队列满了后，新的消息发送将被阻塞\n\n`mpsc::channel` 相当于 `mpsc::sync_channel(infinity)`，其缓存大小限取决于内存大小\n\n通道中消息的发送顺序和接收顺序是一致的，满足`FIFO`原则(先进先出)\n\n### 关闭通道\n\n当所有发送端被 `drop` 或者所有接收端被 `drop` 后，通道会自动关闭\n\n当通道关闭后，发送消息或接收消息将会返回错误\n\n## 共享内存\n\n**互斥器**（*mutex*）是 *mutual exclusion* 的缩写，也就是说，任意时刻，其只允许一个线程访问某些数据。为了访问互斥器中的数据，线程首先需要通过获取互斥器的 **锁**（*lock*）来表明其希望访问数据。锁是一个作为互斥器一部分的数据结构，它记录谁有数据的排他访问权。因此，我们描述互斥器为通过锁系统 **保护**（*guarding*）其数据。\n\n\n\n使用 `lock` 方法获取锁，以访问互斥器中的数据。这个调用会阻塞当前线程，直到我们拥有锁为止\n\n如果另一个线程拥有锁，并且那个线程 panic 了，则 `lock` 调用会失败。在这种情况下，没人能够再获取锁，所以这里选择 `unwrap` 并在遇到这种情况时使线程 panic。\n\n\n\n`Mutex<T>` 是一个智能指针。更准确的说，`lock` 调用 **返回** 一个叫做 `MutexGuard` 的智能指针。这个智能指针实现了 `Deref` 来指向其内部数据；其也提供了一个 `Drop` 实现当 `MutexGuard` 离开作用域时自动释放锁，为此，我们不会冒忘记释放锁并阻塞互斥器为其它线程所用的风险，因为锁的释放是自动发生的。\n\n","meta":{"size":4853,"birthTime":1663496641423.3574,"updateTime":1663496641423.5781}}},"__N_SSG":true}