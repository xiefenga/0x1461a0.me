{"pageProps":{"metaTitle":"面向对象","article":{"title":"面向对象","content":"# 内存划分\r\n\r\nJava 虚拟机在执行 Java 程序时会将内存划分为若干个不同的数据区域，主要有：\r\n\r\n- PC 寄存器（Program Counter Register）：存储 Java 虚拟机正在执行的字节码指令的地址\r\n- Java 虚拟机栈（Java Virtual Machine Stack）：存储栈帧\r\n- 堆（Heap）：存储 GC 所管理的各种对象\r\n- 方法区（Method Area）：存储每一个类的结构信息（比如字段和方法信息、构造方法和普通方法的字节码等）\r\n- 本地方法栈（Native Method Stack）：用来支持 native 方法的调用（比如用 C 语言编写的方法）\r\n\r\n# this\r\n\r\n- `this` 是一个指向当前对象的引用\r\n- `this` 的本质是一个隐藏的、位置靠前的方法参数\r\n- `this` 可用于在一个构造函数中执行另一个构造函数\r\n\r\n# 访问控制\r\n\r\n- `public`：在任何地方都可见\r\n- `protected`：仅在自己的包中和子类中可见\r\n- 无修饰符：仅在自己的包中可见\r\n- `private`：仅在自己的类中可见\r\n\r\n只有 `public`、无修饰符可以修饰顶级类，一个Java文件可以存在多个顶级类，只能有一个被 `public` 修饰，且该类名和文件名必须相同\r\n\r\n继承过后子类对象的内存中依然有父类中定义的 `private` 成员变量，父类的所有成员变量子类都会具有只不过编译器会对其进行访问控制。\r\n\r\n# static\r\n\r\n`static` 修饰的在程序运行过程中只占用一份固定的内存，存储在方法区。\r\n\r\n- 可以通过实例或者类访问\r\n- 不能有同名的实例变量和类变量，不能有相同签名的实例方法和类方法\r\n\r\n- 静态方法内部不可以使用 `this`，不能访问实例成员\r\n\r\n# 初始化\r\n\r\n编译器会自动为未初始化的成员变量设置初始值\r\n\r\n手动提供初始值：\r\n\r\n- 在声明中\r\n- 在构造方法中\r\n- 在初始化块 / 静态初始化块中\r\n\r\n编译器会将**初始化块**复制到每个构造方法的头部（每创建一个实例对象，就会执行一次初始化块）\r\n\r\n当一个类被初始化的时候执行**静态初始化块**，当一个类**第一次被主动**使用时，JVM 会对类进行初始化。\r\n\r\n可以有多个（静态）初始化块，按照在源码中出现的顺序被执行。\r\n\r\n# final\r\n\r\n- 被 `final` 修饰的类不能被继承\r\n- 被 `final` 修饰的方法不能被重写\r\n- 被 `final` 修饰的变量只能进行一次赋值\r\n\r\n一般意义的常量是指 `static final` 修饰的成员变量：\r\n\r\n```java\r\npublic static final double PI = 3.14;\r\n```\r\n\r\n如果将基本类型或字符串定义为常量，并且在**编译**时就能确值（赋值一个字面量），编译器会使用常量值替代各处的变量名\r\n\r\n# 包\r\n\r\n> 包的本质是文件夹\r\n\r\n类的第一句代码必须使用 `package` 声明自己属于哪个包，要想正常使用一个类，必须得知道这个类的具体位置：\r\n\r\n- 使用类的全名（`packagename.classname`）\r\n\r\n\t```java\r\n\txxx.xxx.Dog dog = new xxx.xxx.Dog();\r\n\t```\r\n\r\n- 使用 `import` 导入指定的类名\r\n\r\n\t```java\r\n\timport xxx.xxx.Dog;\r\n\tDog dog = new Dog();\r\n\t```\r\n\r\n**默认导入**：为了方便，Java 编译器会为每个源文件自动导入 2 个包\r\n\r\n- `java.lang.*`\r\n- `源文件所在包.*`\r\n\r\n**静态导入**：直接导入某个包中某个类的静态成员（成员变量、方法、嵌套类）\r\n\r\n正确使用静态导入，可以消除一些重复的类名，提高代码可读性：\r\n\r\n```java\r\nimport static java.lang.Math.PI;\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        System.out.print(PI);\r\n    }\r\n}\r\n```\r\n\r\n# 嵌套类\r\n\r\n嵌套类：定义在另一个类中的类。\r\n\r\n## 内部类\r\n\r\n没有被 `static` 修饰的嵌套类，非静态嵌套类。\r\n\r\n- 跟实例变量、方法一样，内部类与外的相关联。\r\n\t- 必须先创建外部类实例，然后再用外部类实例创建内部类实例\r\n\t- 内部类不能定义除编译时常量以外的任何 `static` 成员\r\n- 内部类中可以直接访问外部类中的所有成员（即使被声明为 `private`）\r\n- 外部类中可以直接访问内部类中的所有成员（即使被声明为 `private`）\r\n- 内部类中访问外部类和自己相同名称的成员可以使用 `outerClassNmae.this.xxx` \r\n\r\n```java\r\npublic class OutterClass {\r\n    private int test = 100;\r\n\r\n    public  class  InnerClass {\r\n        private static final int TEST = 100;\r\n        private  int test = 10;\r\n        private void  test() {\r\n            String str = \"OuterClass -> test: \" + OutterClass.this.test;\r\n            System.out.println(str);\r\n        }\r\n    }\r\n\r\n    public void test() {\r\n        InnerClass ic = new InnerClass();\r\n        System.out.println(\"InnerClass -> static test: \" + InnerClass.TEST);\r\n        System.out.println(\"InnerClass -> test: \" + ic.test);\r\n        System.out.println(\"InnerClass -> test() start\");\r\n        ic.test();\r\n        System.out.println(\"InnerClass -> test() end\");\r\n    }\r\n}\r\n// Main\r\npublic class Main {\r\n    public static void main(String[] args) {\r\n        OutterClass oc = new OutterClass();\r\n        oc.test();\r\n    }\r\n}\r\n```\r\n\r\n## 静态\r\n\r\n- 静态嵌套类在行为上就是一个顶级类，只是定义的代码写在了另一个类中\r\n- 对比一般的顶级类，静态嵌套类多了一些特殊权限\r\n\t- 可以直接访问外部类中的成员（即使被声明为 `private`）\r\n\r\n## 局部类\r\n\r\n局部类：定义在代码块中的类（可以定义在方法中、for 循环中、if 语句中等）\r\n\r\n- 局部类不能定义除编译时常量以外的任何 `static` 成员\r\n- 局部类只能访问 `final` 或者 有效 `final` 的局部变量\r\n\t- 从 Java 8 开始，如果局部变量没有被第二次赋值，就认定为是有效 `final`\r\n- 局部类可以直接访问外部类中的所有成员（即使被声明为 `private`）\r\n\r\n```java\r\npublic class TestLocalClass {\r\n    private int a = 1;\r\n    private static int b = 2;\r\n    private  void  test1() {}\r\n    private  void  test2() {}\r\n\r\n    public void  test3() {\r\n        int c = 3;\r\n        class LocalClass {\r\n            static final int d = 4;\r\n            void  test() {\r\n                System.out.println(a + b + c + d);\r\n            }\r\n        }\r\n        new LocalClass().test();\r\n    }\r\n}\r\n```\r\n\r\n# 抽象类\r\n\r\n- 可以定义抽象方法\r\n- 不能实例化，但可以自定义构造方法\r\n- 子类必须实现抽象父类中的所有抽象方法（除非子类也是一个抽象类\r\n- 可以定义成员变量、常量、嵌套类型、初始化块、非抽象方法等\r\n\r\n常见使用场景：抽取子类的公共实现到抽象父类中，要求子类必须要单独实现的定义成抽象方法\r\n\r\n# 接口\r\n\r\n接口中可以定义的内容：抽象方法、常量、嵌套类型\r\n\r\n- 接口中的内容都是隐式 `public` 的，因此可以省略，java 9 开始可以定义 `private` 方法\r\n- 常量可以省略 `static`、`final`，抽象方法可以省略 `abstract`\r\n- 非抽象类必须实现接口中定义的所有抽象方法\r\n- 如果一个类实现的多个接口中有相同的抽象方法，只需要实现此方法一次\r\n- 当父类、接口中的**方法签名**一样时，那么返回值类型也必须一样\r\n- 一个接口继承的父接口中的**方法签名**一样时，那么返回值类型也必须一样\r\n\r\n如果接口需要升级，比如增加新的抽象方法，会导致大幅的代码改动，以前实现接口的类都得改动。\r\n\r\n若想在不改动以前实现类的前提下进行接口升级，Java 8 开始有 2 种方案：\r\n\r\n- 默认方法（Default Method）\r\n- 静态方法（Static Method）\r\n\r\n## 默认方法\r\n\r\n- 用 `default` 修饰默认方法\r\n- 默认方法只能是实例方法\r\n\r\n**细节**\r\n\r\n- 一个类可以沿用接口的默认实现，也可以覆盖默认方法的实现\r\n\r\n- 抽象类可以重新声明默认方法，将默认方法声明为抽象方法，让子类强制实现\r\n\r\n- 一个接口可以沿用接口父接口的默认实现，也可以覆盖默认实现，也可以重新声明该方法为抽象方法让子类强制实现\r\n\r\n- 如果父类定义的非抽象方法与接口的默认方法相同时，最终将调用父类的方法\r\n\r\n- 如果父接口定义的默认方法与其他父接口定义的（默认）方法相同时，要求子类型必须实现此默认方法\r\n\r\n\t```java\r\n\tpublic interface Runnable {\r\n\t    default void run() { }\r\n\t}\r\n\t\r\n\tpublic interface Walkable {\r\n\t    default void run() { }\r\n\t}\r\n\t\r\n\tpublic interface Testable extends Runnable, Walkable {\r\n\t    @Override\r\n\t    default void run() { }\r\n\t}\r\n\t```\r\n\r\n- 如果父类定义的抽象方法与接口的默认方法相同时，要求子类实现此抽象方法，可以通过 `super` 调用接口的默认方法\r\n\r\n\t```java\r\n\tpublic abstract class Animal {\r\n\t    public abstract void run();\r\n\t}\r\n\t\r\n\tpublic class Dog extends Animal implements Runnable {\r\n\t    @Override\r\n\t    public void run() {\r\n\t        Runnable.super.run();\r\n\t    }\r\n\t}\r\n\t```\r\n\r\n## 静态方法\r\n\r\n接口中定义的静态方法只能通过接口名调用，不能被继承。\r\n\r\n父类的静态方法是可以被子类继承的。\r\n\r\n# 匿名类\r\n\r\n当接口、抽象类的实现类，在整个项目中只用过一次，可以考虑使用匿名类。\r\n\r\n- 匿名类不能定义除编译时常量以外的任何 `static` 成员\r\n- 匿名类只能访问 `final` 或者 有效 `final` 的局部变量\r\n- 匿名类可以直接访问外部类中的所有成员（即使被声明为 `private`）\r\n- 匿名类不能自定义构造方法，但可以有初始化块\r\n\r\n```java\r\npublic abstract class Animal {\r\n    public abstract void run();\r\n}\r\n\r\npublic class Main {\r\n    Animal animal = new Animal() {\r\n        @Override\r\n        public void run() {\r\n\r\n        }\r\n    };\r\n}\r\n```\r\n\r\n# Lamabda\r\n\r\nLambda 表达式是 Java 8 开始才有的语法。\r\n\r\n函数式接口（Functional Interface）：只包含 1 个抽象方法的接口。\r\n\r\n可以在接口上面加上 `@FunctionalInterface` 注解，表示它是一个函数式接口\r\n\r\n当匿名类实现的是函数式接口时，可以使用 Lambda 表达式进行简化，类似于箭头函数。\r\n\r\n- Lambda 只能访问 final 或者 有效 final 的局部变量\r\n- Lambda 没有引入新的作用域\r\n\r\n```java\r\npublic clas sOuterClass{\r\n    private int age= 1;\r\n    public class InnerClass{\r\n        private int age= 2;\r\n        void inner() {\r\n            int v = 4;\r\n            Testablet = new Testable() {\r\n                @Override\r\n                public void test(int v) {\r\n                    System.out.println(v); // 3\r\n                    System.out.println(age); // 2\r\n                    // System.out.println(this.age); // error\r\n                    System.out.println(InnerClass.this.age); // 2\r\n                    System.out.println(OuterClass.this.age); // 1\r\n                }\r\n            };\r\n            t.test(3);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\n","meta":{"size":10962,"birthTime":1663496641381.4316,"updateTime":1663496641381.67}}},"__N_SSG":true}