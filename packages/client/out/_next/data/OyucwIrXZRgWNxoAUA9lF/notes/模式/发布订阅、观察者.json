{"pageProps":{"metaTitle":"发布订阅、观察者","article":{"title":"发布订阅、观察者","content":"## 观察者模式\n\n观察者模式定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知并自动更新。\n\n观察者模式属于行为型模式，行为型模式关注的是对象之间的通讯，观察者模式就是观察者和被观察者之间的通讯\n\n观察者模式又叫做发布-订阅（Publish/Subscribe）模式，订阅者和订阅目标是联系在一起的，当订阅目标发生改变时，逐个通知订阅者\n\n- 气象站可以将每天预测到的温度、湿度、气压等以公告的形式发布给各种第三方网站\n- MVC 模式中的模型与视图的关系也属于观察与被观察\n\n```javascript\nclass Subject {\n  observers = []\n  add(observer) {\n    this.observers.push(observer)\n  }\n  notify(...args) {\n    this.observers.forEach(observer => observer.update(...args))\n  }\n}\n\nclass Observer {\n  update(...args) {\n    console.log(...args)\n  }\n}\n\nconst ob1 = new Observer(), ob2 = new Observer(), sub = new Subject()\n\nsub.add(ob1)\nsub.add(ob2)\n\nsub.notify('I fired `SMS` event')\n```\n\n## 发布订阅模式\n\n24 种基本的设计模式中并没有发布订阅模式，它只是观察者模式的一个别称\n\n但是经过时间的沉淀，似乎他已经强大了起来，已经独立于观察者模式，成为另外一种不同的设计模式\n\n现在的发布订阅模式中，发送者不会将消息直接发送给订阅者，而是通过调度中心或事件通道，它维持着发布者和订阅者之间的联系\n\n- 在微博上关注了A，那么当A发布动态的时候，微博就会为你推送这条动态\n- 一个用户订阅了某个公众号，那么便会收到公众号发来的消息\n\n微博和微信平台则是调度中心，维持着发送者和订阅者之间的联系\n\nEventEmitter 是一个典型的事件调度中心，\n\n```javascript\nclass EventEmitter {\n\n  listeners = new Map()\n\n  on(event, handler) {\n    if (this.listeners.has(event)) {\n      this.listeners.get(event).push(handler)\n    } else {\n      this.listeners.set(event, [handler])\n    }\n  }\n\n  emit(event, ...args) {\n    const listeners = this.listeners.get(event)\n    if (listeners) {\n      listeners.forEach(listener => listener(...args))\n    }\n  }\n}\n```\n\n## 区别\n\n角色数量：\n\n1. 订阅发布模式需要三种角色，发布者、事件中心和订阅者\n2. 二观察者模式需要两种角色，目标和观察者\n\n耦合度：\n\n1. 订阅发布模式是一个事件中心调度模式，订阅者和发布者是没有直接关联的，通过事件中心进行关联，两者是**解耦**的\n2. 观察者模式中目标和观察者是直接关联的，**耦合在一起**\n\n","meta":{"size":2695,"birthTime":1663496641431.726,"updateTime":1663496641431.9287}}},"__N_SSG":true}