{"pageProps":{"metaTitle":"事件","article":{"title":"事件","content":"## 移动端事件\n\n移动端点击触发顺序：touchstart → touchend → mousedown → mouseup → click \n\n当没有设置 `<meta name=\"viewport\" />` 的时候\n\n1. 单机 PC 端事件会延迟 300ms 触发\n2. 双击页面会进行缩放，且会触发两次 touchstart、touchend，不会触发 PC 端事件\n\n[changedTouches](changedTouches)\n\n## 事件穿透\n\n在移动端中对于重叠元素，当最顶层元素触发 `touch` 事件之后并消失，下层元素会触发 `click` 事件\n\n### 发生原因\n\n移动端点击事件触发顺序：touchstart -> touchend -> click\n\nclick 事件的滞后性设计导致了上层元素隐藏之后，浏览器触发了 *click* 事件，但是此时上层元素不见了，所以该事件被派发到了下层元素身上\n\n常见的事件穿透场景：\n\n- 目标元素触发触摸事件时隐藏或移除自身，对应位置元素触发 click 事件或 a 链接跳转\n- 目标元素使用触摸事件跳转至新页面，新页面中对应位置元素触发 click 事件或 a 链接跳转\n\n### 解决方法\n\n- 阻止元素的默认行为，后续事件不再触发\n- 全局阻止默认行为（document）\n- 元素延迟消失\n- 让下层元素没有点击特性（ pointer-events）/ 不使用具有点击特性的元素\n- touch 事件改用 click 事件\n\n在移动端浏览器存在非常多的默认行为，很多时候会影响我们的开发\n\n- 长按选中文字和图片\n- 下拉时刷新\n- 默认的右键菜单\n- ......\n\n## 阻止默认行为\n\n在移动端开发中，对于 `touch` 事件浏览器存在非常多的默认行为，会影响我们的开发\n\n- 长按选中文字和图片\n- 下拉时刷新\n- 默认的右键菜单\n- ......\n\n通常我们一上来就需要阻止掉所有的默认行为，后面的很多功能都需要我们自定义来实现\n\n```javascript\ndocument.addEventListener(\n  'touchstart', \n  e => e.preventDefault(), \n  { passive: false }\n)\n```\n\n当阻止这些默认行为之后，会对一些功能产生影响：\n\n*touchmove*\n\n- 阻止了浏览器的滚动条\n\n- 阻止了用户双指缩放\n\n*touchstart*\n\n- 解决 *IOS10+* 及部分安卓机通过设置 *viewport* 禁止用户缩放的功能（双指滑动、双击）\n- 解决事件点透问题\n- 阻止图片文字被选中\n- 阻止了长按元素会弹出系统菜单\n- 阻止了浏览器回弹的效果\n- 阻止了浏览器的滚动条\n- 阻止了鼠标的事件\n- 阻止了 *input* 框的输入功能\n\n\n\n超链接跳转\n\n```javascript\ndocument.querySelectorAll('a[href]')forEach(link => {\n  link.addEventListener('touchend', () => {\n    location.href = link.href\n  })\n})\n```\n\n **input 获取焦点** \n\n```javascript\ninput.addEventListener('touchstart', event => {\n  event.stopPropagation()\n  // input.focus()\n})\n```\n\n**解决部分文字想要被选中**\n\n```javascript\ncontent = document.querySelector('#content')\ncontent.addEventListener('touchstart', event => {\n  event.stopPropagation()\n})\ncontent.addEventListener('touchmove', event => {\n  event.preventDefault()\n})\n```\n\n## passive\n\npassive event listeners 于 2016 年在 Google I/O 上提出，用于提升页面滑动的流畅度\n\n移动端中如果我们在 `touchstart` 事件中调用了 `preventDefault` 那么整个列表的滚动就会被取消\n\n由于浏览器无法预先知道一个事件处理函数中会不会调用 `preventDefault`，它需要等到事件处理函数执行完后，才能去执行默认行为，然而事件处理函数执行是要耗时的，这样一来就有可能会导致页面卡顿\n\n![](https://xiejie-typora.oss-cn-chengdu.aliyuncs.com/2022-03-22-024306.gif)\n\n将 `addEventListener` 的第三个参数设置为`{ passive: true }`，明确告诉浏览器，事件处理程序不会调用 `preventDefault` 来阻止默认滑动行为\n\n`passive` 为 `true` 的事件监听器被称为 **passive event listener**，从 Chrome 51 开始引入\n\n从Chrome 56开始，`document` 的事件监听器，`passive` 会被默认设置为 `true` 以提高性能\n\n\n\n\n","meta":{"size":3993,"birthTime":1663496641435.0266,"updateTime":1663496641435.3003}}},"__N_SSG":true}